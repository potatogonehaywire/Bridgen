{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"main.py":{"content":"from flask import Flask, jsonify\nimport pandas as pd\nimport os\n\n#app = Flask(__name__)\n\n\n# Route for pairing\n#@app.route(\"/survey\")\ndef main(filename):\n  group_pairs = []\n\n  youth, elderly, y_group, e_group = sort(filename)\n\n  youth_ranked, y_interest_match = score(youth, elderly)\n  elderly_ranked, e_interest_match = score(elderly, youth)\n\n  paired = pairing(youth_ranked, elderly_ranked)\n\n  group = groups(y_group, e_group, paired, e_interest_match)\n\n  group_ranked = group_score(group)\n\n  pair_group = group_pairing(group_ranked)\n\n  for key, val in pair_group.items():\n    one_group = (key, paired[key], val, paired[val])\n    group_pairs.append(one_group)\n\n  return jsonify({\"dict\":paired, \"tuples\":group_pairs})\n\n\ndef sort(file):\n  data = pd.read_csv(file)\n\n  data = data.drop(columns=\"Timestamp\", axis=1)\n\n  data.columns = [\n      \"Name\", \"Email\", \"Bio\", \"Group\", \"Age\", \"Yteach\", \"Ylearn\", \"Ytutor\",\n      \"Ysubject\", \"Eteach\", \"Elearn\", \"Etutor\", \"Esubject\"\n  ]\n\n  data[\"Yteach\"] = data[\"Yteach\"].str.split(\";\")\n  data[\"Ylearn\"] = data[\"Ylearn\"].str.split(\";\")\n  data[\"Ysubject\"] = data[\"Ysubject\"].str.split(\";\")\n  data[\"Eteach\"] = data[\"Eteach\"].str.split(\";\")\n  data[\"Elearn\"] = data[\"Elearn\"].str.split(\";\")\n  data[\"Esubject\"] = data[\"Esubject\"].str.split(\";\")\n\n  youth = data[(data[\"Age\"] == \"Youth\")]\n  elderly = data[(data[\"Age\"] == \"Elderly\")]\n  y_group = youth[(data[\"Group\"] == \"Yes\")]\n  e_group = elderly[(data[\"Group\"] == \"Yes\")]\n\n  return youth, elderly, y_group, e_group\n\n\ndef similarities(person, teacher, is_youth, tutor):\n  points = 0\n\n  if is_youth:\n    for t_hobby in person.Yteach:\n      if t_hobby in teacher.Elearn:\n        points += 1\n\n    for l_hobby in person.Ylearn:\n      if l_hobby in teacher.Eteach:\n        points += 1\n\n    if tutor:\n      if isinstance(teacher.Esubject, list):\n        for subject in person.Ysubject:\n          if subject in teacher.Esubject:\n            points += 1\n\n    return points\n  else:\n    interests = ()\n    for t_hobby in person.Eteach:\n      if t_hobby in teacher.Ylearn:\n        points += 1\n        interests = (*interests, t_hobby)\n\n    for l_hobby in person.Elearn:\n      if l_hobby in teacher.Yteach:\n        points += 1\n        interests = (*interests, l_hobby)\n\n    if tutor:\n      if isinstance(teacher.Ysubject, list):\n        for subject in person.Esubject:\n          if subject in teacher.Ysubject:\n            points += 1\n            interests = (*interests, subject)\n\n    return points, interests\n\n\ndef score(age1, age2):\n\n  all_scored = {}\n  all_match_interests = {}\n\n  for person in age1.itertuples():\n\n    teachers_scored = {}\n\n    matching_interests = {}\n\n    for teacher in age2.itertuples():\n      if person.Age == \"Youth\":\n        if person.Ytutor == \"Yes\":\n          teachers_scored[teacher.Name] = similarities(person, teacher, True,\n                                                       True)\n        else:\n          teachers_scored[teacher.Name] = similarities(person, teacher, True,\n                                                       False)\n      else:\n        if person.Etutor == \"Yes\":\n          teachers_scored[teacher.Name], matching_interests[\n              teacher.Name] = similarities(person, teacher, False, True)\n        else:\n          teachers_scored[teacher.Name], matching_interests[\n              teacher.Name] = similarities(person, teacher, True, False)\n\n    all_scored[person.Name] = teachers_scored\n\n    all_match_interests[person.Name] = matching_interests\n\n  all_ranked = rank(all_scored)\n\n  return all_ranked, all_match_interests\n\n\ndef rank(age):\n  for person in age.keys():\n    person_pref = []\n    person_sorted = dict(\n        sorted(age[person].items(), key=lambda x: x[1], reverse=True))\n    for teacher in person_sorted.keys():\n      person_pref.append(teacher)\n    age[person] = person_pref\n  return age\n\n\ndef pairing(all_youth, all_elderly):\n  youth_free = list(all_youth.keys())\n  elderly_free = list(all_elderly.keys())\n  pairs = {}\n\n  while len(youth_free) > 0 and len(elderly_free) > 0:\n\n    youth = youth_free.pop(0)\n\n    for elder in all_youth[youth]:\n      if elder in elderly_free:\n        pairs[youth] = elder\n        elderly_free.remove(elder)\n        break\n      else:\n        current_match = list(pairs.keys())[list(pairs.values()).index(elder)]\n        if all_elderly[elder].index(youth) < all_elderly[elder].index(\n            current_match):\n          pairs[youth] = elder\n          pairs[current_match] = \"\"\n          youth_free.append(current_match)\n          break\n\n  return pairs\n\n\ndef groups(y_group, e_group, paired, e_interest_match):\n  e_group.rename(columns={\n      \"Name\": \"e_Name\",\n      \"Email\": \"e_Email\",\n      \"Bio\": \"e_Bio\",\n      \"Group\": \"e_Group\",\n      \"Age\": \"e_Age\"\n  },\n                 inplace=True)\n\n  e_group = e_group.drop([\"Yteach\", \"Ylearn\", \"Ytutor\", \"Ysubject\"], axis=1)\n  y_group = y_group.drop([\"Eteach\", \"Elearn\", \"Etutor\", \"Esubject\"], axis=1)\n\n  e_group.set_index(\"e_Name\", inplace=True)\n\n  y_group[\"Elder\"] = \"\"\n\n  y_group.set_index(\"Name\", inplace=True, drop=False)\n\n  for young_person, elder_person in paired.items():\n    y_group.at[young_person, \"Elder\"] = elder_person\n\n  y_group.set_index(\"Elder\", inplace=True)\n\n  groups = pd.concat([y_group, e_group], axis=1).reindex(y_group.index)\n\n  groups[\"MatchingInterests\"] = \"\"\n\n  for young, old in paired.items():\n    for interest in e_interest_match[old][young]:\n      groups.loc[old, \"MatchingInterests\"] += interest + \",\"\n\n  groups.rename(columns={\"Name\": \"y_Name\"}, inplace=True)\n  groups.set_index(\"y_Name\", drop=False, inplace=True)\n\n  return groups\n\n\ndef group_similarities(pair, other):\n  points = 0\n\n  pair_interests = pair.MatchingInterests.split(\",\")\n  other_interests = other.MatchingInterests.split(\",\")\n\n  for interest in pair_interests:\n    if interest in other_interests:\n      points += 1\n\n  return points\n\n\ndef group_score(group):\n  all_scored = {}\n\n  for pair in group.itertuples():\n    pair_scored = {}\n\n    c_group = group[(group[\"y_Name\"] != pair.y_Name)]\n\n    for other in c_group.itertuples():\n      pair_scored[other.Index] = group_similarities(pair, other)\n\n    all_scored[pair.Index] = pair_scored\n\n  all_ranked = rank(all_scored)\n\n  return all_ranked\n\n\ndef group_pairing(groups):\n  \"\"\"group pairing is different because everyone proposes\"\"\"\n\n  unpaired = list(groups.keys())\n  #initialize proposals dictionary with people as keys and an empty list as value\n  proposals = {person: [] for person in groups.keys()}\n\n  matches = {}\n\n\n  while unpaired:\n\n    proposer = unpaired.pop(0)\n    proposer_pref = groups[proposer]\n\n\n    for preferred in proposer_pref:\n\n      if preferred not in proposals[proposer]:\n\n        proposals[proposer].append(preferred)\n\n        #skip to next preferred person if proposer is not in preferred's list\n        if proposer not in groups[preferred]:\n\n          continue\n\n        \n        elif preferred not in matches:\n          \n          unpaired.remove(preferred)\n          matches[preferred] = proposer\n          matches[proposer] = preferred\n          break\n\n        else:\n          \n          current_match = matches[preferred]\n          # if current match is worse than proposer\n          if groups[preferred].index(proposer) < groups[preferred].index(\n              current_match):\n\n            \n            matches[preferred] = proposer\n            matches[proposer] = preferred\n            \n            if current_match in matches.keys():\n              del matches[current_match]\n            \n            unpaired.append(current_match)\n            break\n  #remove duplicates by ordering the keys and values where key is less than value, so any duplicates are easily detected and removed\n  final_matches = {key: val for key, val in matches.items() if key < val}\n  return final_matches\n","size_bytes":7773},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"flask>=3.1.2\",\n    \"flask-cors>=6.0.1\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"psycopg2-binary>=2.9.10\",\n    \"python-dotenv>=1.1.1\",\n    \"werkzeug>=3.1.3\",\n]\n","size_bytes":302},"replit.md":{"content":"# Overview\n\nBridgen is an intergenerational community platform that connects seniors and teens (14+) through shared learning experiences. The application features a Pac-Man-inspired arcade theme designed to bridge the generational gap while maintaining accessibility for seniors. The platform facilitates mentorship circles, skill swaps, storytelling, collaborative projects, workshops, and social spaces for meaningful cross-generational connections.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n\nThe frontend is built with React and TypeScript using Vite as the build tool. The application follows a component-based architecture with:\n\n- **UI Framework**: React with TypeScript for type safety and modern development\n- **Styling**: Tailwind CSS with custom CSS variables for theming, including arcade-inspired color schemes\n- **Component Library**: Radix UI primitives with shadcn/ui components for consistent, accessible UI elements\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management\n- **Build Tool**: Vite for fast development and optimized production builds\n\nThe design system implements a Pac-Man arcade theme with:\n- Custom color palette including pac-yellow, arcade-blue, ghost-orange, and cherry-red\n- Arcade font family using \"Press Start 2P\" for headings\n- High contrast mode for accessibility\n- Responsive design with mobile-first approach\n\n## Backend Architecture\n\nThe backend follows a REST API pattern built with:\n\n- **Framework**: Express.js with TypeScript for type-safe server development\n- **Database Layer**: Drizzle ORM for type-safe database operations with PostgreSQL\n- **Storage Interface**: Abstracted storage layer supporting both in-memory and database implementations\n- **Middleware**: Express middlewares for JSON parsing, URL encoding, and request logging\n- **Development**: Hot reloading with Vite integration for seamless development experience\n\nThe server implements a layered architecture with:\n- Route handlers in `/server/routes.ts`\n- Storage abstraction in `/server/storage.ts`\n- Database schema definitions in `/shared/schema.ts`\n\n## Data Storage Solutions\n\nThe application uses PostgreSQL as the primary database with:\n\n- **ORM**: Drizzle ORM for type-safe database queries and migrations\n- **Database Provider**: Neon Database (serverless PostgreSQL)\n- **Connection**: @neondatabase/serverless for optimized serverless connections\n- **Schema Management**: Centralized schema definitions with Zod validation\n- **Migrations**: Drizzle Kit for database migration management\n\nCurrent schema includes user management with username/password authentication.\n\n## Authentication and Authorization\n\nThe system implements a basic authentication structure with:\n\n- User registration and login capabilities\n- Session-based authentication (referenced in package dependencies)\n- Password-based authentication with secure storage\n- User profile management with customizable avatars and skills\n\n## External Dependencies\n\nThe application integrates several external services and libraries:\n\n- **Database**: Neon Database for serverless PostgreSQL hosting\n- **UI Components**: Extensive Radix UI component library for accessible primitives\n- **Fonts**: Google Fonts for typography (Press Start 2P for arcade theme)\n- **Development Tools**: Replit-specific plugins for development environment integration\n- **Form Handling**: React Hook Form with Hookform resolvers for form validation\n- **Date Handling**: date-fns for date manipulation and formatting\n- **Carousel**: Embla Carousel for interactive UI elements\n\nThe platform is designed to be deployment-ready with support for multiple platforms including mobile apps (iOS/Android) and desktop applications (Windows/macOS), though these are currently UI mockups in the frontend.","size_bytes":3920},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        \"pac-yellow\": \"var(--pac-yellow)\",\n        \"arcade-blue\": \"var(--arcade-blue)\",\n        \"ghost-orange\": \"var(--ghost-orange)\",\n        \"cherry-red\": \"var(--cherry-red)\",\n        \"maze-blue\": \"var(--maze-blue)\",\n        \"arcade-black\": \"var(--arcade-black)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        arcade: [\"var(--font-arcade)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3072},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/app.py":{"content":"from flask import Flask, request, jsonify, session\nfrom flask_cors import CORS\nfrom flask_sqlalchemy import SQLAlchemy\nfrom dotenv import load_dotenv\nimport os\nimport uuid\nfrom datetime import datetime\nfrom werkzeug.security import generate_password_hash, check_password_hash\nimport logging\n\n# Load environment variables\nload_dotenv()\n\napp = Flask(__name__)\n\n# Configure CORS\nCORS(\n    app,\n    supports_credentials=True,\n    origins=[\n        \"http://localhost:5173\",  # your Vite/React dev server\n        \"http://0.0.0.0:5000\"     # if you test locally on this port\n    ]\n)\n\n\n# Configure database\napp.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('DATABASE_URL')\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\napp.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'dev-secret-key')\napp.config['SESSION_TYPE'] = 'filesystem'\n\ndb = SQLAlchemy(app)\n\n# Database Models\nclass User(db.Model):\n    __tablename__ = 'users'\n    \n    id = db.Column(db.String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password_hash = db.Column(db.String(255), nullable=False)\n    first_name = db.Column(db.String(50))\n    last_name = db.Column(db.String(50))\n    age = db.Column(db.Integer)\n    bio = db.Column(db.Text)\n    profile_image_url = db.Column(db.String(255))\n    points = db.Column(db.Integer, default=0)\n    level = db.Column(db.Integer, default=1)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    # Relationships\n    skills = db.relationship('UserSkill', backref='user', lazy=True, cascade='all, delete-orphan')\n    sent_messages = db.relationship('Message', foreign_keys='Message.sender_id', backref='sender', lazy=True)\n    \n    def set_password(self, password):\n        self.password_hash = generate_password_hash(password)\n    \n    def check_password(self, password):\n        return check_password_hash(self.password_hash, password)\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'username': self.username,\n            'email': self.email,\n            'first_name': self.first_name,\n            'last_name': self.last_name,\n            'age': self.age,\n            'bio': self.bio,\n            'profile_image_url': self.profile_image_url,\n            'points': self.points,\n            'level': self.level,\n            'created_at': self.created_at.isoformat() if self.created_at else None,\n            'skills': [skill.to_dict() for skill in self.skills] if self.skills else []\n        }\n\nclass Skill(db.Model):\n    __tablename__ = 'skills'\n    \n    id = db.Column(db.String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\n    name = db.Column(db.String(100), unique=True, nullable=False)\n    category = db.Column(db.String(50), nullable=False)\n    description = db.Column(db.Text)\n    icon = db.Column(db.String(50))\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'name': self.name,\n            'category': self.category,\n            'description': self.description,\n            'icon': self.icon\n        }\n\nclass UserSkill(db.Model):\n    __tablename__ = 'user_skills'\n    \n    id = db.Column(db.String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\n    user_id = db.Column(db.String(36), db.ForeignKey('users.id'), nullable=False)\n    skill_id = db.Column(db.String(36), db.ForeignKey('skills.id'), nullable=False)\n    proficiency_level = db.Column(db.Integer, nullable=False, default=1)  # 1-10 scale\n    want_to_teach = db.Column(db.Boolean, default=False)\n    want_to_learn = db.Column(db.Boolean, default=False)\n    years_experience = db.Column(db.Integer, default=0)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    skill = db.relationship('Skill', backref='user_skills')\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'skill': self.skill.to_dict() if self.skill else None,\n            'proficiency_level': self.proficiency_level,\n            'want_to_teach': self.want_to_teach,\n            'want_to_learn': self.want_to_learn,\n            'years_experience': self.years_experience\n        }\n\nclass SkillMatch(db.Model):\n    __tablename__ = 'skill_matches'\n    \n    id = db.Column(db.String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\n    user1_id = db.Column(db.String(36), db.ForeignKey('users.id'), nullable=False)\n    user2_id = db.Column(db.String(36), db.ForeignKey('users.id'), nullable=False)\n    skill_id = db.Column(db.String(36), db.ForeignKey('skills.id'), nullable=False)\n    match_percentage = db.Column(db.Float, nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    user1 = db.relationship('User', foreign_keys=[user1_id])\n    user2 = db.relationship('User', foreign_keys=[user2_id])\n    skill = db.relationship('Skill')\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'user1': {'id': self.user1.id, 'username': self.user1.username} if self.user1 else None,\n            'user2': {'id': self.user2.id, 'username': self.user2.username} if self.user2 else None,\n            'skill': self.skill.to_dict() if self.skill else None,\n            'match_percentage': self.match_percentage\n        }\n\nclass Message(db.Model):\n    __tablename__ = 'messages'\n    \n    id = db.Column(db.String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\n    sender_id = db.Column(db.String(36), db.ForeignKey('users.id'), nullable=False)\n    room_id = db.Column(db.String(100), nullable=False)\n    content = db.Column(db.Text, nullable=False)\n    message_type = db.Column(db.String(20), default='text')  # text, system, image, etc.\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def to_dict(self):\n        sender_data = None\n        if hasattr(self, 'sender') and self.sender:\n            sender_data = {'id': self.sender.id, 'username': self.sender.username}\n        return {\n            'id': self.id,\n            'sender': sender_data,\n            'room_id': self.room_id,\n            'content': self.content,\n            'message_type': self.message_type,\n            'created_at': self.created_at.isoformat() if self.created_at else None\n        }\n\nclass MeetingRoom(db.Model):\n    __tablename__ = 'meeting_rooms'\n    \n    id = db.Column(db.String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\n    name = db.Column(db.String(100), nullable=False)\n    description = db.Column(db.Text)\n    creator_id = db.Column(db.String(36), db.ForeignKey('users.id'), nullable=False)\n    zoom_meeting_id = db.Column(db.String(100))\n    zoom_join_url = db.Column(db.String(500))\n    scheduled_time = db.Column(db.DateTime)\n    max_participants = db.Column(db.Integer, default=10)\n    is_active = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    creator = db.relationship('User', backref='created_rooms')\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'name': self.name,\n            'description': self.description,\n            'creator': {'id': self.creator.id, 'username': self.creator.username} if self.creator else None,\n            'zoom_meeting_id': self.zoom_meeting_id,\n            'zoom_join_url': self.zoom_join_url,\n            'scheduled_time': self.scheduled_time.isoformat() if self.scheduled_time else None,\n            'max_participants': self.max_participants,\n            'is_active': self.is_active\n        }\n\n# Initialize database\ndef create_tables():\n    with app.app_context():\n        db.create_all()\n        \n        # Create default skills if they don't exist\n        default_skills = [\n            {'name': 'Python Programming', 'category': 'Technology', 'description': 'Programming in Python', 'icon': 'code'},\n            {'name': 'Cooking', 'category': 'Life Skills', 'description': 'Culinary arts and cooking techniques', 'icon': 'chef-hat'},\n            {'name': 'Gardening', 'category': 'Hobbies', 'description': 'Growing plants and maintaining gardens', 'icon': 'flower'},\n            {'name': 'Piano', 'category': 'Music', 'description': 'Playing piano and music theory', 'icon': 'music'},\n            {'name': 'Photography', 'category': 'Creative', 'description': 'Digital and film photography', 'icon': 'camera'},\n            {'name': 'Language - Spanish', 'category': 'Languages', 'description': 'Spanish language skills', 'icon': 'globe'},\n            {'name': 'Knitting', 'category': 'Crafts', 'description': 'Knitting and yarn crafts', 'icon': 'scissors'},\n            {'name': 'Chess', 'category': 'Games', 'description': 'Strategic chess playing', 'icon': 'gamepad-2'}\n        ]\n        \n        for skill_data in default_skills:\n            existing_skill = Skill.query.filter_by(name=skill_data['name']).first()\n            if not existing_skill:\n                skill = Skill(**skill_data)\n                db.session.add(skill)\n        \n        db.session.commit()\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5001, debug=True)","size_bytes":9358},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/main.py":{"content":"from app import app, create_tables\nfrom routes import *  # Import all routes\n\nif __name__ == '__main__':\n    # Initialize database tables\n    create_tables()\n    \n    # Run the Flask app\n    app.run(host='0.0.0.0', port=5001, debug=True)","size_bytes":237},"server/routes.py":{"content":"from flask import request, jsonify, session\nfrom app import app, db, User, Skill, UserSkill, SkillMatch, Message, MeetingRoom\nfrom sqlalchemy import func, or_, and_\nimport uuid\nfrom datetime import datetime\nimport math\n\n# User Authentication Routes\n@app.route('/api/auth/register', methods=['POST'])\ndef register():\n    try:\n        data = request.get_json()\n        \n        # Validate required fields\n        if not data.get('username') or not data.get('email') or not data.get('password'):\n            return jsonify({'error': 'Username, email, and password are required'}), 400\n        \n        # Check if user already exists\n        existing_user = User.query.filter(\n            or_(User.username == data['username'], User.email == data['email'])\n        ).first()\n        \n        if existing_user:\n            return jsonify({'error': 'User already exists'}), 400\n        \n        # Create new user\n        user = User(\n            username=data['username'],\n            email=data['email'],\n            first_name=data.get('first_name', ''),\n            last_name=data.get('last_name', ''),\n            age=data.get('age'),\n            bio=data.get('bio', ''),\n            profile_image_url=data.get('profile_image_url', '')\n        )\n        user.set_password(data['password'])\n        \n        db.session.add(user)\n        db.session.commit()\n        \n        session['user_id'] = user.id\n        return jsonify(user.to_dict()), 201\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/auth/login', methods=['POST'])\ndef login():\n    try:\n        data = request.get_json()\n        \n        if not data.get('username') or not data.get('password'):\n            return jsonify({'error': 'Username and password are required'}), 400\n        \n        user = User.query.filter_by(username=data['username']).first()\n        \n        if user and user.check_password(data['password']):\n            session['user_id'] = user.id\n            return jsonify(user.to_dict()), 200\n        else:\n            return jsonify({'error': 'Invalid credentials'}), 401\n            \n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/auth/logout', methods=['POST'])\ndef logout():\n    session.pop('user_id', None)\n    return jsonify({'message': 'Logged out successfully'}), 200\n\n@app.route('/api/auth/user', methods=['GET'])\ndef get_current_user():\n    user_id = session.get('user_id')\n    if not user_id:\n        return jsonify({'error': 'Not authenticated'}), 401\n    \n    user = User.query.get(user_id)\n    if not user:\n        return jsonify({'error': 'User not found'}), 404\n    \n    return jsonify(user.to_dict()), 200\n\n# User Profile Routes\n@app.route('/api/users/<user_id>', methods=['GET'])\ndef get_user_profile(user_id):\n    user = User.query.get(user_id)\n    if not user:\n        return jsonify({'error': 'User not found'}), 404\n    \n    return jsonify(user.to_dict()), 200\n\n@app.route('/api/users/<user_id>', methods=['PUT'])\ndef update_user_profile(user_id):\n    current_user_id = session.get('user_id')\n    if not current_user_id or current_user_id != user_id:\n        return jsonify({'error': 'Unauthorized'}), 401\n    \n    try:\n        user = User.query.get(user_id)\n        if not user:\n            return jsonify({'error': 'User not found'}), 404\n        \n        data = request.get_json()\n        \n        # Update allowed fields\n        if 'first_name' in data:\n            user.first_name = data['first_name']\n        if 'last_name' in data:\n            user.last_name = data['last_name']\n        if 'age' in data:\n            user.age = data['age']\n        if 'bio' in data:\n            user.bio = data['bio']\n        if 'profile_image_url' in data:\n            user.profile_image_url = data['profile_image_url']\n        \n        user.updated_at = datetime.utcnow()\n        db.session.commit()\n        \n        return jsonify(user.to_dict()), 200\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n# Skills Routes\n@app.route('/api/skills', methods=['GET'])\ndef get_skills():\n    skills = Skill.query.all()\n    return jsonify([skill.to_dict() for skill in skills]), 200\n\n@app.route('/api/skills', methods=['POST'])\ndef create_skill():\n    try:\n        data = request.get_json()\n        \n        if not data.get('name') or not data.get('category'):\n            return jsonify({'error': 'Name and category are required'}), 400\n        \n        # Check if skill already exists\n        existing_skill = Skill.query.filter_by(name=data['name']).first()\n        if existing_skill:\n            return jsonify({'error': 'Skill already exists'}), 400\n        \n        skill = Skill(\n            name=data['name'],\n            category=data['category'],\n            description=data.get('description', ''),\n            icon=data.get('icon', 'star')\n        )\n        \n        db.session.add(skill)\n        db.session.commit()\n        \n        return jsonify(skill.to_dict()), 201\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n# User Skills Routes\n@app.route('/api/users/<user_id>/skills', methods=['GET'])\ndef get_user_skills(user_id):\n    user_skills = UserSkill.query.filter_by(user_id=user_id).all()\n    return jsonify([user_skill.to_dict() for user_skill in user_skills]), 200\n\n@app.route('/api/users/<user_id>/skills', methods=['POST'])\ndef add_user_skill(user_id):\n    current_user_id = session.get('user_id')\n    if not current_user_id or current_user_id != user_id:\n        return jsonify({'error': 'Unauthorized'}), 401\n    \n    try:\n        data = request.get_json()\n        \n        if not data.get('skill_id'):\n            return jsonify({'error': 'Skill ID is required'}), 400\n        \n        # Check if user skill already exists\n        existing_user_skill = UserSkill.query.filter_by(\n            user_id=user_id, \n            skill_id=data['skill_id']\n        ).first()\n        \n        if existing_user_skill:\n            return jsonify({'error': 'User already has this skill'}), 400\n        \n        user_skill = UserSkill(\n            user_id=user_id,\n            skill_id=data['skill_id'],\n            proficiency_level=data.get('proficiency_level', 1),\n            want_to_teach=data.get('want_to_teach', False),\n            want_to_learn=data.get('want_to_learn', False),\n            years_experience=data.get('years_experience', 0)\n        )\n        \n        db.session.add(user_skill)\n        db.session.commit()\n        \n        return jsonify(user_skill.to_dict()), 201\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/users/<user_id>/skills/<skill_id>', methods=['DELETE'])\ndef remove_user_skill(user_id, skill_id):\n    current_user_id = session.get('user_id')\n    if not current_user_id or current_user_id != user_id:\n        return jsonify({'error': 'Unauthorized'}), 401\n    \n    try:\n        user_skill = UserSkill.query.filter_by(\n            user_id=user_id, \n            skill_id=skill_id\n        ).first()\n        \n        if not user_skill:\n            return jsonify({'error': 'User skill not found'}), 404\n        \n        db.session.delete(user_skill)\n        db.session.commit()\n        \n        return jsonify({'message': 'Skill removed successfully'}), 200\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n# Skill Matching Routes\n@app.route('/api/skill-matches/<user_id>', methods=['GET'])\ndef get_skill_matches(user_id):\n    try:\n        # Get user's skills\n        user_skills = UserSkill.query.filter_by(user_id=user_id).all()\n        \n        if not user_skills:\n            return jsonify([]), 200\n        \n        matches = []\n        \n        for user_skill in user_skills:\n            if user_skill.want_to_learn:\n                # Find users who want to teach this skill\n                potential_teachers = UserSkill.query.filter(\n                    and_(\n                        UserSkill.skill_id == user_skill.skill_id,\n                        UserSkill.want_to_teach == True,\n                        UserSkill.user_id != user_id\n                    )\n                ).all()\n                \n                for teacher_skill in potential_teachers:\n                    # Calculate match percentage based on proficiency difference and experience\n                    proficiency_diff = abs(teacher_skill.proficiency_level - user_skill.proficiency_level)\n                    experience_factor = min(teacher_skill.years_experience / 5, 1.0)  # Cap at 5 years\n                    \n                    # Higher match percentage for teachers with more experience and appropriate proficiency\n                    match_percentage = max(0, 100 - (proficiency_diff * 10) + (experience_factor * 20))\n                    \n                    matches.append({\n                        'user': teacher_skill.user.to_dict(),\n                        'skill': teacher_skill.skill.to_dict(),\n                        'match_percentage': round(match_percentage, 1),\n                        'teacher_proficiency': teacher_skill.proficiency_level,\n                        'teacher_experience': teacher_skill.years_experience,\n                        'match_type': 'teacher'\n                    })\n            \n            if user_skill.want_to_teach:\n                # Find users who want to learn this skill\n                potential_students = UserSkill.query.filter(\n                    and_(\n                        UserSkill.skill_id == user_skill.skill_id,\n                        UserSkill.want_to_learn == True,\n                        UserSkill.user_id != user_id\n                    )\n                ).all()\n                \n                for student_skill in potential_students:\n                    proficiency_diff = abs(user_skill.proficiency_level - student_skill.proficiency_level)\n                    \n                    # Higher match percentage for students with lower proficiency (more to teach)\n                    match_percentage = max(0, 100 - (proficiency_diff * 5))\n                    \n                    matches.append({\n                        'user': student_skill.user.to_dict(),\n                        'skill': student_skill.skill.to_dict(),\n                        'match_percentage': round(match_percentage, 1),\n                        'student_proficiency': student_skill.proficiency_level,\n                        'match_type': 'student'\n                    })\n        \n        # Sort by match percentage descending\n        matches.sort(key=lambda x: x['match_percentage'], reverse=True)\n        \n        return jsonify(matches), 200\n        \n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/skill-matches/percentiles', methods=['GET'])\ndef get_skill_match_percentiles():\n    try:\n        # Calculate percentiles for all skills\n        skills = Skill.query.all()\n        percentiles = {}\n        \n        for skill in skills:\n            user_skills = UserSkill.query.filter_by(skill_id=skill.id).all()\n            \n            if user_skills:\n                proficiency_levels = [us.proficiency_level for us in user_skills]\n                proficiency_levels.sort()\n                \n                percentiles[skill.name] = {\n                    'skill_id': skill.id,\n                    'total_users': len(user_skills),\n                    'avg_proficiency': round(sum(proficiency_levels) / len(proficiency_levels), 1),\n                    'percentiles': {\n                        '25th': proficiency_levels[int(len(proficiency_levels) * 0.25)] if len(proficiency_levels) >= 4 else proficiency_levels[0],\n                        '50th': proficiency_levels[int(len(proficiency_levels) * 0.5)] if len(proficiency_levels) >= 2 else proficiency_levels[0],\n                        '75th': proficiency_levels[int(len(proficiency_levels) * 0.75)] if len(proficiency_levels) >= 4 else proficiency_levels[-1],\n                        '90th': proficiency_levels[int(len(proficiency_levels) * 0.9)] if len(proficiency_levels) >= 10 else proficiency_levels[-1]\n                    }\n                }\n        \n        return jsonify(percentiles), 200\n        \n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n# Chat and Messaging Routes\n@app.route('/api/messages/<room_id>', methods=['GET'])\ndef get_messages(room_id):\n    try:\n        page = request.args.get('page', 1, type=int)\n        per_page = request.args.get('per_page', 50, type=int)\n        \n        messages = Message.query.filter_by(room_id=room_id)\\\n            .order_by(Message.created_at.desc())\\\n            .paginate(page=page, per_page=per_page, error_out=False)\n        \n        return jsonify({\n            'messages': [message.to_dict() for message in reversed(messages.items)],\n            'has_next': messages.has_next,\n            'has_prev': messages.has_prev,\n            'total': messages.total\n        }), 200\n        \n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/messages', methods=['POST'])\ndef send_message():\n    try:\n        current_user_id = session.get('user_id')\n        if not current_user_id:\n            return jsonify({'error': 'Unauthorized'}), 401\n        \n        data = request.get_json()\n        \n        if not data.get('room_id') or not data.get('content'):\n            return jsonify({'error': 'Room ID and content are required'}), 400\n        \n        message = Message(\n            sender_id=current_user_id,\n            room_id=data['room_id'],\n            content=data['content'],\n            message_type=data.get('message_type', 'text')\n        )\n        \n        db.session.add(message)\n        db.session.commit()\n        \n        return jsonify(message.to_dict()), 201\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n# Meeting Room Routes\n@app.route('/api/meeting-rooms', methods=['GET'])\ndef get_meeting_rooms():\n    rooms = MeetingRoom.query.filter_by(is_active=True).order_by(MeetingRoom.created_at.desc()).all()\n    return jsonify([room.to_dict() for room in rooms]), 200\n\n@app.route('/api/meeting-rooms', methods=['POST'])\ndef create_meeting_room():\n    try:\n        current_user_id = session.get('user_id')\n        if not current_user_id:\n            return jsonify({'error': 'Unauthorized'}), 401\n        \n        data = request.get_json()\n        \n        if not data.get('name'):\n            return jsonify({'error': 'Room name is required'}), 400\n        \n        # Generate a mock Zoom meeting ID and URL (replace with actual Zoom SDK integration)\n        zoom_meeting_id = f\"bridgen-{uuid.uuid4().hex[:8]}\"\n        zoom_join_url = f\"https://zoom.us/j/{zoom_meeting_id}\"\n        \n        room = MeetingRoom(\n            name=data['name'],\n            description=data.get('description', ''),\n            creator_id=current_user_id,\n            zoom_meeting_id=zoom_meeting_id,\n            zoom_join_url=zoom_join_url,\n            scheduled_time=datetime.fromisoformat(data['scheduled_time']) if data.get('scheduled_time') else None,\n            max_participants=data.get('max_participants', 10)\n        )\n        \n        db.session.add(room)\n        db.session.commit()\n        \n        return jsonify(room.to_dict()), 201\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/meeting-rooms/<room_id>', methods=['GET'])\ndef get_meeting_room(room_id):\n    room = MeetingRoom.query.get(room_id)\n    if not room:\n        return jsonify({'error': 'Room not found'}), 404\n    \n    return jsonify(room.to_dict()), 200\n\n@app.route('/api/meeting-rooms/<room_id>/join', methods=['POST'])\ndef join_meeting_room(room_id):\n    try:\n        current_user_id = session.get('user_id')\n        if not current_user_id:\n            return jsonify({'error': 'Unauthorized'}), 401\n        \n        room = MeetingRoom.query.get(room_id)\n        if not room:\n            return jsonify({'error': 'Room not found'}), 404\n        \n        if not room.is_active:\n            return jsonify({'error': 'Room is not active'}), 400\n        \n        # In a real implementation, you would integrate with Zoom SDK here\n        # For now, we'll just return the join URL\n        return jsonify({\n            'zoom_join_url': room.zoom_join_url,\n            'meeting_id': room.zoom_meeting_id,\n            'room': room.to_dict()\n        }), 200\n        \n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n# Gamification Routes\n@app.route('/api/users/<user_id>/points', methods=['POST'])\ndef add_points(user_id):\n    try:\n        current_user_id = session.get('user_id')\n        if not current_user_id or current_user_id != user_id:\n            return jsonify({'error': 'Unauthorized'}), 401\n        \n        data = request.get_json()\n        points = data.get('points', 0)\n        \n        if points <= 0:\n            return jsonify({'error': 'Points must be positive'}), 400\n        \n        user = User.query.get(user_id)\n        if not user:\n            return jsonify({'error': 'User not found'}), 404\n        \n        user.points += points\n        \n        # Calculate new level (every 100 points = 1 level)\n        new_level = (user.points // 100) + 1\n        level_up = new_level > user.level\n        user.level = new_level\n        \n        user.updated_at = datetime.utcnow()\n        db.session.commit()\n        \n        return jsonify({\n            'points': user.points,\n            'level': user.level,\n            'level_up': level_up,\n            'points_to_next_level': 100 - (user.points % 100)\n        }), 200\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n# Health check\n@app.route('/api/health', methods=['GET'])\ndef health_check():\n    return jsonify({'status': 'healthy', 'timestamp': datetime.utcnow().isoformat()}), 200","size_bytes":18135},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Mock user for development\n  const mockUser = {\n    id: \"user-123\",\n    username: \"demo_user\",\n    email: \"demo@example.com\",\n    first_name: \"Demo\",\n    last_name: \"User\",\n    age: 25,\n    bio: \"Demo user for testing\",\n    profile_image_url: \"\",\n    points: 150,\n    level: 2\n  };\n\n  // Authentication routes\n  app.get(\"/api/auth/me\", (req, res) => {\n    // Return mock authenticated user\n    res.json(mockUser);\n  });\n\n  // User routes\n  app.get(\"/api/users/:id\", (req, res) => {\n    const { id } = req.params;\n    if (id === mockUser.id) {\n      res.json(mockUser);\n    } else {\n      res.status(404).json({ error: \"User not found\" });\n    }\n  });\n\n  // Skills routes\n  app.get(\"/api/skills\", (req, res) => {\n    // Return mock skills data\n    res.json([\n      { id: \"1\", name: \"JavaScript\", category: \"Programming\" },\n      { id: \"2\", name: \"React\", category: \"Frontend\" },\n      { id: \"3\", name: \"Node.js\", category: \"Backend\" }\n    ]);\n  });\n\n  // Skill matches routes\n  app.get(\"/api/skill-matches/:userId\", (req, res) => {\n    res.json([]);\n  });\n\n  app.get(\"/api/skill-matches/percentiles\", (req, res) => {\n    res.json({});\n  });\n\n  // Gamification routes\n  app.get(\"/api/gam/state/:userId\", (req, res) => {\n    const { userId } = req.params;\n    if (userId === mockUser.id) {\n      res.json({\n        id: userId,\n        username: mockUser.username,\n        level: mockUser.level,\n        xp: mockUser.points,\n        streak: 3,\n        badges: [\"Welcome Badge\", \"First Level\"],\n        skills: [\"JavaScript\", \"React\"]\n      });\n    } else {\n      res.status(404).json({ error: \"Gamification state not found\" });\n    }\n  });\n\n  app.post(\"/api/gam/earn\", (req, res) => {\n    const { points } = req.body;\n    res.json({ \n      success: true, \n      message: `Earned ${points} points!`,\n      newTotal: mockUser.points + points \n    });\n  });\n\n  // Meeting rooms routes\n  app.get(\"/api/meeting-rooms\", (req, res) => {\n    res.json([]);\n  });\n\n  app.post(\"/api/meeting-rooms\", (req, res) => {\n    const roomData = req.body;\n    res.json({ \n      id: \"room-123\", \n      ...roomData,\n      created_at: new Date().toISOString()\n    });\n  });\n\n  app.post(\"/api/meeting-rooms/:roomId/join\", (req, res) => {\n    const { roomId } = req.params;\n    res.json({ \n      success: true, \n      message: `Joined room ${roomId}`,\n      room_id: roomId\n    });\n  });\n\n  // Sync routes\n  app.post(\"/api/sync-zoom\", (req, res) => {\n    res.json({ synced: [] });\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":2724},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":584},"client/src/app.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport Profile from \"./profile\";\nimport Chat from \"@/pages/chat\";\nimport Features from \"@/pages/features\";\nimport Gamification from \"@/pages/gamification\";\nimport Games from \"@/pages/games\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/profile\" component={Profile} />\n      <Route path=\"/chat\" component={Chat} />\n      <Route path=\"/features\" component={Features} />\n      <Route path=\"/gamification\" component={Gamification} />\n      <Route path=\"/games\" component={Games} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":1151},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(240, 10%, 4%);\n  --foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 6%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --popover: hsl(240, 10%, 6%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --primary: hsl(60, 100%, 50%);\n  --primary-foreground: hsl(240, 10%, 4%);\n  --secondary: hsl(213, 100%, 50%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --muted: hsl(217, 91%, 20%);\n  --muted-foreground: hsl(217, 32%, 70%);\n  --accent: hsl(33, 100%, 50%);\n  --accent-foreground: hsl(240, 10%, 4%);\n  --destructive: hsl(348, 100%, 50%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(217, 91%, 20%);\n  --input: hsl(217, 91%, 20%);\n  --ring: hsl(60, 100%, 50%);\n  --pac-yellow: hsl(60, 100%, 50%);\n  --arcade-blue: hsl(213, 100%, 50%);\n  --ghost-orange: hsl(33, 100%, 50%);\n  --cherry-red: hsl(348, 100%, 50%);\n  --maze-blue: hsl(217, 91%, 20%);\n  --arcade-black: hsl(240, 10%, 4%);\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --font-arcade: \"Press Start 2P\", monospace;\n  --radius: 12px;\n}\n\n.high-contrast {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(0, 0%, 100%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(0, 0%, 0%);\n  --primary: hsl(60, 100%, 50%);\n  --secondary: hsl(213, 100%, 50%);\n  --border: hsl(0, 0%, 100%);\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(203.7736, 87.6033%, 52.5490%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195.0000, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer components {\n  .pacman-move {\n    animation: pacmanMove 15s linear infinite;\n  }\n  \n  @keyframes pacmanMove {\n    0% { transform: translateX(-100px); }\n    100% { transform: translateX(calc(100vw + 100px)); }\n  }\n  \n  .typewriter {\n    overflow: hidden;\n    border-right: .15em solid var(--primary);\n    white-space: nowrap;\n    margin: 0 auto;\n    letter-spacing: .15em;\n    animation: typing 3.5s steps(40, end), blink-caret .75s step-end infinite;\n  }\n  \n  @keyframes typing {\n    from { width: 0 }\n    to { width: 100% }\n  }\n  \n  @keyframes blink-caret {\n    from, to { border-color: transparent }\n    50% { border-color: var(--primary); }\n  }\n  \n  .pixel-sparkle {\n    animation: sparkle 2s ease-in-out infinite alternate;\n  }\n  \n  @keyframes sparkle {\n    0% { opacity: 0.5; transform: scale(1); }\n    100% { opacity: 1; transform: scale(1.2); }\n  }\n  \n  .bounce-button {\n    animation: bounceButton 2s ease-in-out infinite;\n  }\n  \n  @keyframes bounceButton {\n    0%, 20%, 50%, 80%, 100% { transform: translateY(0); }\n    40% { transform: translateY(-10px); }\n    60% { transform: translateY(-5px); }\n  }\n  \n  .dot-trail {\n    animation: dotEat 0.5s ease-in-out forwards;\n  }\n  \n  @keyframes dotEat {\n    0% { opacity: 1; transform: scale(1); }\n    100% { opacity: 0; transform: scale(0); }\n  }\n  \n  .glow-dot {\n    animation: dotEat 0.5s ease-in-out forwards, glowPulse 1s ease-in-out infinite alternate;\n    box-shadow: 0 0 10px currentColor, 0 0 20px currentColor;\n  }\n  \n  .power-pellet {\n    animation: dotEat 0.5s ease-in-out forwards, powerPulse 0.5s ease-in-out infinite alternate;\n    box-shadow: 0 0 15px currentColor, 0 0 30px currentColor, 0 0 45px currentColor;\n  }\n  \n  @keyframes glowPulse {\n    0% { box-shadow: 0 0 10px currentColor, 0 0 20px currentColor; }\n    100% { box-shadow: 0 0 15px currentColor, 0 0 30px currentColor; }\n  }\n  \n  @keyframes powerPulse {\n    0% { \n      box-shadow: 0 0 15px currentColor, 0 0 30px currentColor, 0 0 45px currentColor;\n      transform: scale(1);\n    }\n    100% { \n      box-shadow: 0 0 25px currentColor, 0 0 50px currentColor, 0 0 75px currentColor;\n      transform: scale(1.2);\n    }\n  }\n  \n  .glow {\n    box-shadow: 0 0 20px var(--primary), 0 0 40px var(--primary), 0 0 60px var(--primary);\n  }\n  \n  .arcade-button {\n    transition: all 0.3s ease;\n    position: relative;\n    overflow: hidden;\n  }\n  \n  .arcade-button:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(255, 255, 0, 0.3);\n  }\n  \n  .arcade-button:active {\n    transform: translateY(0px);\n  }\n  \n  .maze-pattern {\n    background-image: \n      linear-gradient(90deg, transparent 24px, var(--border) 24px, var(--border) 26px, transparent 26px),\n      linear-gradient(transparent 24px, var(--border) 24px, var(--border) 26px, transparent 26px);\n    background-size: 50px 50px;\n  }\n\n  .font-arcade {\n    font-family: var(--font-arcade);\n  }\n\n  /* Additional colorful theming enhancements */\n  .rainbow-text {\n    background: linear-gradient(45deg, #ff0000, #ff7300, #fffb00, #48ff00, #00ffd5, #002bff, #7a00ff, #ff00c8, #ff0000);\n    background-size: 400%;\n    -webkit-background-clip: text;\n    background-clip: text;\n    -webkit-text-fill-color: transparent;\n    animation: rainbowShift 3s ease-in-out infinite;\n  }\n\n  @keyframes rainbowShift {\n    0%, 100% { background-position: 0% 50%; }\n    50% { background-position: 100% 50%; }\n  }\n\n  .neon-glow {\n    text-shadow: \n      0 0 5px currentColor,\n      0 0 10px currentColor,\n      0 0 15px currentColor,\n      0 0 20px var(--primary),\n      0 0 35px var(--primary),\n      0 0 40px var(--primary);\n    animation: neonFlicker 2s ease-in-out infinite alternate;\n  }\n\n  @keyframes neonFlicker {\n    0%, 100% { opacity: 1; }\n    50% { opacity: 0.8; }\n  }\n\n  .color-shift-bg {\n    background: linear-gradient(45deg, var(--primary), var(--secondary), var(--accent));\n    background-size: 400% 400%;\n    animation: gradientShift 4s ease infinite;\n  }\n\n  @keyframes gradientShift {\n    0% { background-position: 0% 50%; }\n    50% { background-position: 100% 50%; }\n    100% { background-position: 0% 50%; }\n  }\n\n  .pulse-border {\n    border: 2px solid var(--primary);\n    animation: pulseBorder 2s ease-in-out infinite;\n  }\n\n  @keyframes pulseBorder {\n    0%, 100% { border-color: var(--primary); box-shadow: 0 0 5px var(--primary); }\n    50% { border-color: var(--secondary); box-shadow: 0 0 20px var(--secondary), 0 0 30px var(--secondary); }\n  }\n}\n","size_bytes":7322},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./app\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  User,\n  Zap,\n  Star,\n  TrendingUp,\n  Plus,\n  X,\n  Users,\n  Percent,\n} from \"lucide-react\";\nimport Navigation from \"@/components/navigation\";\nimport TypewriterText from \"@/components/typewriter-text\";\n\ninterface UserProfile {\n  id: string;\n  username: string;\n  first_name: string;\n  last_name: string;\n  age: number;\n  bio: string;\n  profile_image_url: string;\n  points: number;\n  level: number;\n  skills: UserSkill[];\n}\n\ninterface UserSkill {\n  id: string;\n  skill: Skill;\n  proficiency_level: number;\n  want_to_teach: boolean;\n  want_to_learn: boolean;\n  years_experience: number;\n}\n\ninterface Skill {\n  id: string;\n  name: string;\n  category: string;\n  description: string;\n  icon: string;\n}\n\ninterface SkillMatch {\n  user: UserProfile;\n  skill: Skill;\n  match_percentage: number;\n  match_type: \"teacher\" | \"student\";\n  teacher_experience?: number;\n}\n\ninterface SkillPercentiles {\n  [skillName: string]: {\n    percentiles: {\n      \"25th\": number;\n      \"50th\": number;\n      \"75th\": number;\n      \"90th\": number;\n    };\n  };\n}\n\nexport default function Profile() {\n  const [editMode, setEditMode] = useState(false);\n  const [showAddSkill, setShowAddSkill] = useState(false);\n  const [selectedSkillId, setSelectedSkillId] = useState(\"\");\n  const [skillForm, setSkillForm] = useState({\n    proficiency_level: 1,\n    want_to_teach: false,\n    want_to_learn: false,\n    years_experience: 0,\n  });\n  const [profileForm, setProfileForm] = useState({\n    first_name: \"\",\n    last_name: \"\",\n    age: 0,\n    bio: \"\",\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // 1️⃣ Get current auth user\n  const { data: authUser, isLoading: loadingAuth } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n    queryFn: () => apiRequest(\"GET\", \"/api/auth/me\"),\n  });\n\n  const userId = (authUser as any)?.id;\n\n  // 2️⃣ Fetch profile, skills, matches, gamification\n  const { data: userProfile, isLoading: loadingProfile } =\n    useQuery<UserProfile>({\n      queryKey: [\"/api/users\", userId],\n      enabled: !!userId,\n    });\n\n  const { data: availableSkills } = useQuery<Skill[]>({\n    queryKey: [\"/api/skills\"],\n  });\n\n  const { data: skillMatches, isLoading: loadingMatches } = useQuery<\n    SkillMatch[]\n  >({\n    queryKey: [\"/api/skill-matches\", userId],\n    enabled: !!userId,\n  });\n\n  const { data: skillPercentiles } = useQuery<SkillPercentiles>({\n    queryKey: [\"/api/skill-matches/percentiles\"],\n  });\n\n  const { data: gamState } = useQuery<any>({\n    queryKey: [\"/api/gam/state\", userId],\n    enabled: !!userId,\n  });\n\n  // 3️⃣ Mutations\n  const updateProfileMutation = useMutation({\n    mutationFn: (data: Partial<UserProfile>) =>\n      apiRequest(\"PUT\", `/api/users/${userId}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\", userId] });\n      toast({\n        title: \"Profile Updated\",\n        description: \"Your profile has been successfully updated!\",\n      });\n      setEditMode(false);\n    },\n    onError: (error: Error) =>\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      }),\n  });\n\n  const addSkillMutation = useMutation({\n    mutationFn: async (skillData: any) => {\n      await apiRequest(\"POST\", `/api/users/${userId}/skills`, {\n        skill_id: selectedSkillId,\n        ...skillData,\n      });\n      await apiRequest(\"POST\", `/api/gam/earn`, {\n        points: 50,\n        reason: \"Added a new skill\",\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\", userId] });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/skill-matches\", userId],\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/gam/state\", userId] });\n      toast({\n        title: \"Skill Added\",\n        description: \"Your skill has been successfully added!\",\n      });\n      setShowAddSkill(false);\n      setSelectedSkillId(\"\");\n      setSkillForm({\n        proficiency_level: 1,\n        want_to_teach: false,\n        want_to_learn: false,\n        years_experience: 0,\n      });\n    },\n    onError: (error: Error) =>\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      }),\n  });\n\n  const removeSkillMutation = useMutation({\n    mutationFn: (skillId: string) =>\n      apiRequest(\"DELETE\", `/api/users/${userId}/skills/${skillId}`, {}),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\", userId] });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/skill-matches\", userId],\n      });\n      toast({\n        title: \"Skill Removed\",\n        description: \"Skill has been removed from your profile.\",\n      });\n    },\n    onError: (error: Error) =>\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      }),\n  });\n\n  const connectMutation = useMutation({\n    mutationFn: (partnerId: string) =>\n      apiRequest(\"POST\", `/api/messages/start`, { partner_id: partnerId }),\n    onSuccess: () =>\n      toast({ title: \"Connection started\", description: \"Opening chat…\" }),\n    onError: (err: Error) =>\n      toast({\n        title: \"Error\",\n        description: err.message,\n        variant: \"destructive\",\n      }),\n  });\n\n  // Sync profile form with fetched data\n  useEffect(() => {\n    if (userProfile) {\n      setProfileForm({\n        first_name: userProfile?.first_name || \"\",\n        last_name: userProfile?.last_name || \"\",\n        age: userProfile?.age || 0,\n        bio: userProfile?.bio || \"\",\n      });\n    }\n  }, [userProfile]);\n\n  // 5️⃣ Helpers\n  const getSkillIcon = (iconName: string) =>\n    iconName === \"code\" ? (\n      <Zap className=\"w-4 h-4\" />\n    ) : iconName === \"music\" ? (\n      <Star className=\"w-4 h-4\" />\n    ) : (\n      <TrendingUp className=\"w-4 h-4\" />\n    );\n  const getProficiencyColor = (level: number) =>\n    level <= 3\n      ? \"bg-red-500\"\n      : level <= 6\n        ? \"bg-yellow-500\"\n        : level <= 8\n          ? \"bg-blue-500\"\n          : \"bg-green-500\";\n  const getPercentileRank = (skillName: string, proficiencyLevel: number) => {\n    if (!skillPercentiles || !skillPercentiles[skillName]) return \"N/A\";\n    const p = skillPercentiles[skillName]?.percentiles;\n    if (!p) return \"N/A\";\n    if (proficiencyLevel >= p[\"90th\"]) return \"Top 10%\";\n    if (proficiencyLevel >= p[\"75th\"]) return \"Top 25%\";\n    if (proficiencyLevel >= p[\"50th\"]) return \"Top 50%\";\n    return \"Bottom 50%\";\n  };\n\n  if (loadingAuth || loadingProfile) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navigation />\n        <div className=\"flex items-center justify-center h-96\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-arcade text-primary mb-4\">\n              Loading Profile...\n            </div>\n            <div className=\"flex space-x-2 justify-center\">\n              <div className=\"w-4 h-4 bg-pac-yellow rounded-full animate-pulse\"></div>\n              <div className=\"w-4 h-4 bg-pac-yellow rounded-full animate-pulse delay-75\"></div>\n              <div className=\"w-4 h-4 bg-pac-yellow rounded-full animate-pulse delay-150\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // 6️⃣ Render\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      <div className=\"container py-12\">\n        <div className=\"grid gap-4 grid-cols-1 md:grid-cols-3\">\n          {/* Profile Card */}\n          <Card className=\"col-span-1 md:col-span-1\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl font-semibold\">\n                {editMode ? (\n                  \"Edit Profile\"\n                ) : (\n                  <TypewriterText text={userProfile?.username || \"Profile\"} />\n                )}\n              </CardTitle>\n              <CardDescription>\n                {editMode\n                  ? \"Update your personal details.\"\n                  : \"Your personal information.\"}\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"grid gap-4\">\n              <div className=\"flex justify-center\">\n                <img\n                  src={\n                    userProfile?.profile_image_url ||\n                    \"https://avatar.iran.liara.run/public/boy?username=liara\"\n                  }\n                  alt=\"Profile\"\n                  className=\"rounded-full w-32 h-32 object-cover\"\n                />\n              </div>\n              {editMode ? (\n                <>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <div>\n                      <Label htmlFor=\"first_name\">First Name</Label>\n                      <Input\n                        id=\"first_name\"\n                        value={profileForm.first_name}\n                        onChange={(e) =>\n                          setProfileForm({\n                            ...profileForm,\n                            first_name: e.target.value,\n                          })\n                        }\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"last_name\">Last Name</Label>\n                      <Input\n                        id=\"last_name\"\n                        value={profileForm.last_name}\n                        onChange={(e) =>\n                          setProfileForm({\n                            ...profileForm,\n                            last_name: e.target.value,\n                          })\n                        }\n                      />\n                    </div>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"age\">Age</Label>\n                    <Input\n                      type=\"number\"\n                      id=\"age\"\n                      value={profileForm.age.toString()}\n                      onChange={(e) =>\n                        setProfileForm({\n                          ...profileForm,\n                          age: parseInt(e.target.value),\n                        })\n                      }\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"bio\">Bio</Label>\n                    <Textarea\n                      id=\"bio\"\n                      value={profileForm.bio}\n                      onChange={(e) =>\n                        setProfileForm({ ...profileForm, bio: e.target.value })\n                      }\n                    />\n                  </div>\n                  <Button\n                    onClick={() => updateProfileMutation.mutate(profileForm)}\n                    className=\"w-full\"\n                  >\n                    Update Profile\n                  </Button>\n                  <Button\n                    variant=\"secondary\"\n                    onClick={() => setEditMode(false)}\n                    className=\"w-full\"\n                  >\n                    Cancel\n                  </Button>\n                </>\n              ) : (\n                <>\n                  <div className=\"text-center\">\n                    <p className=\"text-lg font-semibold\">\n                      {userProfile?.first_name} {userProfile?.last_name}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Age: {userProfile?.age}\n                    </p>\n                  </div>\n                  <div>\n                    <h3 className=\"text-md font-semibold\">About Me</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {userProfile?.bio || \"No bio provided.\"}\n                    </p>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <div>\n                      <Badge variant=\"secondary\">\n                        Level: {gamState?.level}\n                      </Badge>\n                    </div>\n                    <div>\n                      <Badge variant=\"outline\">\n                        Points: {gamState?.points}\n                      </Badge>\n                    </div>\n                  </div>\n                  <Button onClick={() => setEditMode(true)} className=\"w-full\">\n                    Edit Profile\n                  </Button>\n                </>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Skills Card */}\n          <Card className=\"col-span-1 md:col-span-1\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl font-semibold\">Skills</CardTitle>\n              <CardDescription>\n                Your current skills and proficiencies.\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"list-none space-y-2\">\n                {userProfile?.skills?.map((userSkill) => (\n                  <li\n                    key={userSkill.id}\n                    className=\"flex items-center justify-between\"\n                  >\n                    <div className=\"flex items-center\">\n                      {getSkillIcon(userSkill.skill.icon)}\n                      <span className=\"ml-2\">{userSkill.skill.name}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge\n                        className={getProficiencyColor(\n                          userSkill.proficiency_level,\n                        )}\n                      >\n                        Level {userSkill.proficiency_level}\n                      </Badge>\n                      <Badge variant=\"outline\">\n                        {getPercentileRank(\n                          userSkill.skill.name,\n                          userSkill.proficiency_level,\n                        )}\n                      </Badge>\n                      <Button\n                        variant=\"destructive\"\n                        size=\"icon\"\n                        onClick={() => removeSkillMutation.mutate(userSkill.id)}\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </li>\n                ))}\n              </ul>\n              <Dialog open={showAddSkill} onOpenChange={setShowAddSkill}>\n                <DialogTrigger asChild>\n                  <Button variant=\"outline\" className=\"w-full mt-4\">\n                    Add Skill <Plus className=\"w-4 h-4 ml-2\" />\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"sm:max-w-[425px]\">\n                  <DialogHeader>\n                    <DialogTitle>Add New Skill</DialogTitle>\n                    <DialogDescription>\n                      Choose a skill and set your proficiency.\n                    </DialogDescription>\n                  </DialogHeader>\n                  <div className=\"grid gap-4 py-4\">\n                    <div className=\"grid grid-cols-4 items-center gap-4\">\n                      <Label htmlFor=\"skill\">Skill</Label>\n                      <Select\n                        onValueChange={(value) => setSelectedSkillId(value)}\n                        defaultValue={selectedSkillId}\n                      >\n                        <SelectTrigger className=\"col-span-3\">\n                          <SelectValue placeholder=\"Select a skill\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {availableSkills?.map((skill: Skill) => (\n                            <SelectItem key={skill.id} value={skill.id}>\n                              {skill.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div className=\"grid grid-cols-4 items-center gap-4\">\n                      <Label htmlFor=\"proficiency\">Proficiency</Label>\n                      <Select\n                        onValueChange={(value) =>\n                          setSkillForm({\n                            ...skillForm,\n                            proficiency_level: parseInt(value),\n                          })\n                        }\n                        defaultValue={skillForm.proficiency_level.toString()}\n                      >\n                        <SelectTrigger className=\"col-span-3\">\n                          <SelectValue placeholder=\"Select level\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map((level) => (\n                            <SelectItem key={level} value={level.toString()}>\n                              Level {level}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div className=\"grid grid-cols-4 items-center gap-4\">\n                      <Label htmlFor=\"years_experience\">Years Experience</Label>\n                      <Input\n                        type=\"number\"\n                        id=\"years_experience\"\n                        defaultValue={skillForm.years_experience.toString()}\n                        onChange={(e) =>\n                          setSkillForm({\n                            ...skillForm,\n                            years_experience: parseInt(e.target.value),\n                          })\n                        }\n                        className=\"col-span-3\"\n                      />\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Input\n                        type=\"checkbox\"\n                        id=\"teach\"\n                        checked={skillForm.want_to_teach}\n                        onChange={() =>\n                          setSkillForm({\n                            ...skillForm,\n                            want_to_teach: !skillForm.want_to_teach,\n                          })\n                        }\n                      />\n                      <Label htmlFor=\"teach\">Want to Teach</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Input\n                        type=\"checkbox\"\n                        id=\"learn\"\n                        checked={skillForm.want_to_learn}\n                        onChange={() =>\n                          setSkillForm({\n                            ...skillForm,\n                            want_to_learn: !skillForm.want_to_learn,\n                          })\n                        }\n                      />\n                      <Label htmlFor=\"learn\">Want to Learn</Label>\n                    </div>\n                  </div>\n                  <Button onClick={() => addSkillMutation.mutate(skillForm)}>\n                    Add Skill\n                  </Button>\n                </DialogContent>\n              </Dialog>\n            </CardContent>\n          </Card>\n\n          {/* Skill Matches Card */}\n          <Card className=\"col-span-1 md:col-span-1\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl font-semibold\">Matches</CardTitle>\n              <CardDescription>\n                Potential teachers and students based on your skills.\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {!skillMatches || skillMatches.length === 0 ? (\n                <p className=\"text-sm text-muted-foreground\">\n                  No matches found. Add more skills to find potential\n                  connections!\n                </p>\n              ) : (\n                <ul className=\"list-none space-y-4\">\n                  {skillMatches?.map((match: SkillMatch) => (\n                    <li\n                      key={`${match.user.id}-${match.skill.id}`}\n                      className=\"border rounded-md p-4\"\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <div className=\"text-lg font-semibold\">\n                            {match.user.username}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            Skill: {match.skill.name}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            Match:{\" \"}\n                            <Badge variant=\"secondary\">\n                              {\" \"}\n                              {match.match_percentage}%\n                            </Badge>\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            Type:{\" \"}\n                            {match.match_type === \"teacher\" ? (\n                              <>\n                                <Users className=\"inline w-4 h-4\" />{\" \"}\n                                Teacher{\" \"}\n                              </>\n                            ) : (\n                              <>\n                                <Percent className=\"inline w-4 h-4\" /> Student\n                              </>\n                            )}\n                          </div>\n                          {match.teacher_experience && (\n                            <div className=\"text-sm text-muted-foreground\">\n                              Experience: {match.teacher_experience} years\n                            </div>\n                          )}\n                        </div>\n                        <Button\n                          onClick={() => connectMutation.mutate(match.user.id)}\n                        >\n                          Connect\n                        </Button>\n                      </div>\n                    </li>\n                  ))}\n                </ul>\n              )}\n            {/* </CardContent>\n          </Card> */}\n          {/* Skill Groups Card */}\n          {/* <Card className=\"col-span-1 md:col-span-1\"> */}\n            <CardHeader>\n              <CardTitle className=\"text-2xl font-semibold\">Groups</CardTitle>\n              <CardDescription>\n                Potential teachers and students based on your skills.\n              </CardDescription>\n            </CardHeader>\n            {/* <CardContent> */}\n              {!skillMatches || skillMatches.length === 0 ? (\n                <p className=\"text-sm text-muted-foreground\">\n                  No matches found. Add more skills to find potential\n                  connections!\n                </p>\n              ) : (\n                <ul className=\"list-none space-y-4\">\n                  {skillMatches?.map((match: SkillMatch) => (\n                    <li\n                      key={`${match.user.id}-${match.skill.id}`}\n                      className=\"border rounded-md p-4\"\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <div className=\"text-lg font-semibold\">\n                            {match.user.username}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            Skill: {match.skill.name}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            Match:{\" \"}\n                            <Badge variant=\"secondary\">\n                              {\" \"}\n                              {match.match_percentage}%\n                            </Badge>\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            Type:{\" \"}\n                            {match.match_type === \"teacher\" ? (\n                              <>\n                                <Users className=\"inline w-4 h-4\" />{\" \"}\n                                Teacher{\" \"}\n                              </>\n                            ) : (\n                              <>\n                                <Percent className=\"inline w-4 h-4\" /> Student\n                              </>\n                            )}\n                          </div>\n                          {match.teacher_experience && (\n                            <div className=\"text-sm text-muted-foreground\">\n                              Experience: {match.teacher_experience} years\n                            </div>\n                          )}\n                        </div>\n                        <Button\n                          onClick={() => connectMutation.mutate(match.user.id)}\n                        >\n                          Connect\n                        </Button>\n                      </div>\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":25828},"client/src/components/accessibility-toggle.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Eye, EyeOff } from \"lucide-react\";\n\nexport default function AccessibilityToggle() {\n  const [isHighContrast, setIsHighContrast] = useState(false);\n\n  const toggleAccessibility = () => {\n    setIsHighContrast(!isHighContrast);\n    document.body.classList.toggle('high-contrast');\n  };\n\n  return (\n    <div className=\"fixed top-4 right-4 z-50\">\n      <Button\n        onClick={toggleAccessibility}\n        className=\"bg-primary text-primary-foreground px-4 py-2 rounded-full font-arcade text-xs hover:glow transition-all\"\n        data-testid=\"button-accessibility-toggle\"\n      >\n        {isHighContrast ? (\n          <>\n            <EyeOff className=\"w-4 h-4 mr-2\" />\n            Normal View\n          </>\n        ) : (\n          <>\n            <Eye className=\"w-4 h-4 mr-2\" />\n            Clear View\n          </>\n        )}\n      </Button>\n    </div>\n  );\n}\n","size_bytes":950},"client/src/components/animated-pacman.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\n\ninterface AnimatedPacmanProps {\n  size?: number;\n  speed?: number;\n  className?: string;\n  withDots?: boolean;\n  direction?: 'left' | 'right' | 'up' | 'down';\n  autoMove?: boolean;\n}\n\nexport default function AnimatedPacman({ \n  size = 70, \n  speed = 3, \n  className = \"\", \n  withDots = false,\n  direction = 'right',\n  autoMove = false \n}: AnimatedPacmanProps) {\n  const [mouthOpen, setMouthOpen] = useState(true);\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  const [dots, setDots] = useState<{x: number, y: number, eaten: boolean}[]>([]);\n  const [score, setScore] = useState(0);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // Initialize dots if enabled\n  useEffect(() => {\n    if (withDots && containerRef.current) {\n      const container = containerRef.current;\n      const containerWidth = container.offsetWidth;\n      const containerHeight = container.offsetHeight;\n      const dotSpacing = 40;\n      const newDots = [];\n\n      for (let x = dotSpacing; x < containerWidth - size; x += dotSpacing) {\n        for (let y = dotSpacing; y < containerHeight - size; y += dotSpacing) {\n          newDots.push({ x, y, eaten: false });\n        }\n      }\n      setDots(newDots);\n    }\n  }, [withDots, size]);\n\n  // Mouth animation\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setMouthOpen(prev => !prev);\n    }, 150);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Auto movement\n  useEffect(() => {\n    if (!autoMove || !containerRef.current) return;\n\n    const interval = setInterval(() => {\n      setPosition(prev => {\n        const container = containerRef.current;\n        if (!container) return prev;\n\n        const containerWidth = container.offsetWidth;\n        const containerHeight = container.offsetHeight;\n        let newX = prev.x;\n        let newY = prev.y;\n\n        switch (direction) {\n          case 'right':\n            newX = prev.x + speed;\n            if (newX > containerWidth - size) newX = -size;\n            break;\n          case 'left':\n            newX = prev.x - speed;\n            if (newX < -size) newX = containerWidth;\n            break;\n          case 'up':\n            newY = prev.y - speed;\n            if (newY < -size) newY = containerHeight;\n            break;\n          case 'down':\n            newY = prev.y + speed;\n            if (newY > containerHeight - size) newY = -size;\n            break;\n        }\n\n        return { x: newX, y: newY };\n      });\n    }, 50);\n\n    return () => clearInterval(interval);\n  }, [autoMove, direction, speed, size]);\n\n  // Check dot collisions\n  useEffect(() => {\n    if (!withDots) return;\n\n    setDots(prevDots => \n      prevDots.map(dot => {\n        if (dot.eaten) return dot;\n        \n        const distance = Math.sqrt(\n          Math.pow(dot.x - position.x, 2) + Math.pow(dot.y - position.y, 2)\n        );\n        \n        if (distance < size / 2) {\n          setScore(prev => prev + 10);\n          return { ...dot, eaten: true };\n        }\n        \n        return dot;\n      })\n    );\n  }, [position, withDots, size]);\n\n  const getRotation = () => {\n    switch (direction) {\n      case 'left': return 'rotate(180deg)';\n      case 'up': return 'rotate(-90deg)';\n      case 'down': return 'rotate(90deg)';\n      default: return 'rotate(0deg)';\n    }\n  };\n\n  const getClipPath = () => {\n    if (!mouthOpen) return 'none';\n    \n    switch (direction) {\n      case 'left':\n        return 'polygon(0% 74%, 56% 48%, 0% 21%, 0% 0%, 100% 0%, 100% 100%, 0% 100%)';\n      case 'up':\n        return 'polygon(74% 0%, 48% 56%, 21% 0%, 0% 0%, 0% 100%, 100% 100%, 100% 0%)';\n      case 'down':\n        return 'polygon(74% 100%, 48% 44%, 21% 100%, 0% 100%, 0% 0%, 100% 0%, 100% 100%)';\n      default:\n        return 'polygon(100% 74%, 44% 48%, 100% 21%, 100% 0%, 0% 0%, 0% 100%, 100% 100%)';\n    }\n  };\n\n  if (withDots) {\n    return (\n      <div ref={containerRef} className={`relative w-full h-64 bg-gray-900 rounded-lg overflow-hidden ${className}`} data-testid=\"pacman-game\">\n        {/* Score */}\n        <div className=\"absolute top-4 left-4 text-pac-yellow font-arcade text-sm z-10\">\n          SCORE: {score}\n        </div>\n        \n        {/* Dots */}\n        {dots.map((dot, index) => (\n          !dot.eaten && (\n            <div\n              key={index}\n              className=\"absolute w-2 h-2 bg-pac-yellow rounded-full animate-pulse\"\n              style={{\n                left: dot.x,\n                top: dot.y,\n              }}\n            />\n          )\n        ))}\n        \n        {/* Pac-Man */}\n        <div\n          className=\"absolute transition-all duration-75 ease-linear\"\n          style={{\n            left: position.x,\n            top: position.y,\n            width: size,\n            height: size,\n            transform: getRotation(),\n          }}\n          data-testid=\"animated-pacman\"\n        >\n          <div\n            className=\"absolute inset-0 bg-pac-yellow rounded-full transition-all duration-150\"\n            style={{\n              clipPath: getClipPath()\n            }}\n          />\n          {/* Eye */}\n          <div \n            className=\"absolute bg-black rounded-full\"\n            style={{\n              width: size * 0.12,\n              height: size * 0.12,\n              top: size * 0.25,\n              left: size * 0.35\n            }}\n          />\n          {/* Power pellet glow effect */}\n          {mouthOpen && (\n            <div \n              className=\"absolute inset-0 bg-pac-yellow rounded-full animate-ping opacity-20\"\n              style={{ animationDuration: '0.3s' }}\n            />\n          )}\n        </div>\n        \n        {/* Game over message */}\n        {dots.every(dot => dot.eaten) && dots.length > 0 && (\n          <div className=\"absolute inset-0 flex items-center justify-center bg-black bg-opacity-75\">\n            <div className=\"text-center text-pac-yellow font-arcade\">\n              <div className=\"text-2xl mb-2\">LEVEL COMPLETE!</div>\n              <div className=\"text-lg\">Final Score: {score}</div>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div \n      className={`relative ${className}`}\n      style={{ width: size, height: size }}\n      data-testid=\"animated-pacman\"\n    >\n      <div\n        className=\"absolute inset-0 bg-pac-yellow rounded-full transition-all duration-150\"\n        style={{\n          clipPath: getClipPath(),\n          transform: getRotation(),\n        }}\n      />\n      {/* Eye */}\n      <div \n        className=\"absolute bg-black rounded-full\"\n        style={{\n          width: size * 0.12,\n          height: size * 0.12,\n          top: size * 0.25,\n          left: direction === 'left' ? size * 0.53 : size * 0.35,\n          transform: getRotation(),\n        }}\n      />\n      {/* Power glow effect */}\n      {mouthOpen && (\n        <div \n          className=\"absolute inset-0 bg-pac-yellow rounded-full animate-ping opacity-30\"\n          style={{ animationDuration: '0.5s' }}\n        />\n      )}\n    </div>\n  );\n}","size_bytes":7048},"client/src/components/chat-section.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { MessageSquare, TextSelection } from \"lucide-react\";\n\nexport default function ChatSection() {\n  return (\n    <section id=\"chat\" className=\"py-20 bg-muted\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"font-arcade text-primary text-2xl md:text-4xl mb-6\" data-testid=\"text-chat-title\">TALK AND CONNECT</h2>\n          <p className=\"text-xl text-muted-foreground\">Choose your conversation style</p>\n        </div>\n        \n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Coffee Rooms */}\n          <div className=\"bg-card rounded-lg p-8 border-2 border-accent hover:glow transition-all\" data-testid=\"card-coffee-rooms\">\n            <div className=\"text-center mb-6\">\n              <div className=\"text-5xl mb-4\">☕</div>\n              <h3 className=\"font-arcade text-accent text-sm mb-2\">COFFEE ROOMS</h3>\n              <p className=\"text-muted-foreground text-lg\">Casual friendly chats about daily life</p>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-3 p-3 bg-background rounded\">\n                <div className=\"w-8 h-8 bg-pac-yellow rounded-full flex items-center justify-center text-sm\">👻</div>\n                <div>\n                  <p className=\"text-sm font-medium\">Morning Coffee Chat</p>\n                  <p className=\"text-xs text-muted-foreground\">12 active</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-3 p-3 bg-background rounded\">\n                <div className=\"w-8 h-8 bg-secondary rounded-full flex items-center justify-center text-sm\">👻</div>\n                <div>\n                  <p className=\"text-sm font-medium\">Weekend Plans</p>\n                  <p className=\"text-xs text-muted-foreground\">8 active</p>\n                </div>\n              </div>\n            </div>\n            \n            <Button className=\"arcade-button w-full mt-6 bg-accent text-accent-foreground py-3 rounded-full font-arcade text-sm\" data-testid=\"button-join-coffee-chat\">\n              JOIN CHAT\n            </Button>\n          </div>\n          \n          {/* Mentorship Rooms */}\n          <div className=\"bg-card rounded-lg p-8 border-2 border-primary hover:glow transition-all\" data-testid=\"card-mentorship-rooms\">\n            <div className=\"text-center mb-6\">\n              <div className=\"text-5xl mb-4\">🎯</div>\n              <h3 className=\"font-arcade text-primary text-sm mb-2\">MENTORSHIP ROOMS</h3>\n              <p className=\"text-muted-foreground text-lg\">Focused discussions on skills and topics</p>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-3 p-3 bg-background rounded\">\n                <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center text-sm\">🎓</div>\n                <div>\n                  <p className=\"text-sm font-medium\">Technology Help</p>\n                  <p className=\"text-xs text-muted-foreground\">15 active</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-3 p-3 bg-background rounded\">\n                <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center text-sm\">🎨</div>\n                <div>\n                  <p className=\"text-sm font-medium\">Creative Arts</p>\n                  <p className=\"text-xs text-muted-foreground\">9 active</p>\n                </div>\n              </div>\n            </div>\n            \n            <Button className=\"arcade-button w-full mt-6 bg-primary text-primary-foreground py-3 rounded-full font-arcade text-sm\" data-testid=\"button-join-mentorship-room\">\n              JOIN ROOM\n            </Button>\n          </div>\n          \n          {/* Private Messaging */}\n          <div className=\"bg-card rounded-lg p-8 border-2 border-secondary hover:glow transition-all\" data-testid=\"card-private-messaging\">\n            <div className=\"text-center mb-6\">\n              <div className=\"text-5xl mb-4\">💌</div>\n              <h3 className=\"font-arcade text-secondary text-sm mb-2\">PRIVATE MESSAGING</h3>\n              <p className=\"text-muted-foreground text-lg\">Simple, secure one-on-one conversations</p>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between p-3 bg-background rounded\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 bg-secondary rounded-full flex items-center justify-center text-sm\">👤</div>\n                  <div>\n                    <p className=\"text-sm font-medium\">Recent Messages</p>\n                    <p className=\"text-xs text-muted-foreground\">3 unread</p>\n                  </div>\n                </div>\n                <div className=\"w-3 h-3 bg-destructive rounded-full\"></div>\n              </div>\n              \n              <div className=\"text-center\">\n                <Button variant=\"outline\" className=\"arcade-button text-sm bg-background text-foreground px-4 py-2 rounded border border-border hover:border-secondary\" data-testid=\"button-enlarge-text\">\n                  <TextSelection className=\"w-4 h-4 mr-2\" />\n                  Enlarge Text\n                </Button>\n              </div>\n            </div>\n            \n            <Button className=\"arcade-button w-full mt-6 bg-secondary text-secondary-foreground py-3 rounded-full font-arcade text-sm\" data-testid=\"button-open-messages\">\n              OPEN MESSAGES\n            </Button>\n          </div>\n        </div>\n        \n        {/* Topic Tags */}\n        <div className=\"mt-12 text-center\">\n          <h3 className=\"font-arcade text-foreground text-lg mb-6\">POPULAR TOPICS</h3>\n          <div className=\"flex flex-wrap gap-3 justify-center\">\n            <span className=\"bg-primary text-primary-foreground px-4 py-2 rounded-full text-sm font-medium\" data-testid=\"tag-technology\">#Technology</span>\n            <span className=\"bg-secondary text-secondary-foreground px-4 py-2 rounded-full text-sm font-medium\" data-testid=\"tag-cooking\">#Cooking</span>\n            <span className=\"bg-accent text-accent-foreground px-4 py-2 rounded-full text-sm font-medium\" data-testid=\"tag-gardening\">#Gardening</span>\n            <span className=\"bg-destructive text-destructive-foreground px-4 py-2 rounded-full text-sm font-medium\" data-testid=\"tag-history\">#History</span>\n            <span className=\"bg-muted text-muted-foreground px-4 py-2 rounded-full text-sm font-medium\" data-testid=\"tag-music\">#Music</span>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":6803},"client/src/components/download-section.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Download, Printer } from \"lucide-react\";\n\nexport default function DownloadSection() {\n  return (\n    <section id=\"download\" className=\"py-20 bg-muted\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n        <h2 className=\"font-arcade text-primary text-2xl md:text-4xl mb-6\" data-testid=\"text-download-title\">GET BRIDGEN ANYWHERE</h2>\n        <p className=\"text-xl text-muted-foreground mb-12\">Access your intergenerational community on any device</p>\n        \n        <div className=\"grid md:grid-cols-3 gap-8\">\n          {/* Mobile Apps */}\n          <div className=\"bg-card rounded-lg p-8\" data-testid=\"card-mobile-apps\">\n            <div className=\"text-5xl mb-4\">📱</div>\n            <h3 className=\"font-arcade text-secondary text-sm mb-4\">MOBILE APP</h3>\n            <p className=\"text-muted-foreground mb-6\">Chat on the go with our mobile app</p>\n            <div className=\"space-y-3\">\n              <Button className=\"arcade-button w-full bg-secondary text-secondary-foreground py-3 rounded-full font-arcade text-sm\" data-testid=\"button-download-ios\">\n                🍎 iOS APP\n              </Button>\n              <Button className=\"arcade-button w-full bg-secondary text-secondary-foreground py-3 rounded-full font-arcade text-sm\" data-testid=\"button-download-android\">\n                🤖 ANDROID APP\n              </Button>\n            </div>\n          </div>\n          \n          {/* Desktop Apps */}\n          <div className=\"bg-card rounded-lg p-8\" data-testid=\"card-desktop-apps\">\n            <div className=\"text-5xl mb-4\">💻</div>\n            <h3 className=\"font-arcade text-primary text-sm mb-4\">DESKTOP APP</h3>\n            <p className=\"text-muted-foreground mb-6\">Full featured experience for your computer</p>\n            <div className=\"space-y-3\">\n              <Button className=\"arcade-button w-full bg-primary text-primary-foreground py-3 rounded-full font-arcade text-sm\" data-testid=\"button-download-windows\">\n                🪟 WINDOWS\n              </Button>\n              <Button className=\"arcade-button w-full bg-primary text-primary-foreground py-3 rounded-full font-arcade text-sm\" data-testid=\"button-download-mac\">\n                🍎 MAC OS\n              </Button>\n            </div>\n          </div>\n          \n          {/* PDF Guide */}\n          <div className=\"bg-card rounded-lg p-8\" data-testid=\"card-pdf-guide\">\n            <div className=\"text-5xl mb-4\">📄</div>\n            <h3 className=\"font-arcade text-accent text-sm mb-4\">STARTER GUIDE</h3>\n            <p className=\"text-muted-foreground mb-6\">Printable guide for easy reference</p>\n            <div className=\"space-y-3\">\n              <Button className=\"arcade-button w-full bg-accent text-accent-foreground py-3 rounded-full font-arcade text-sm\" data-testid=\"button-download-pdf\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                DOWNLOAD PDF\n              </Button>\n              <Button variant=\"outline\" className=\"arcade-button w-full bg-background text-foreground py-3 rounded-full text-sm border border-border hover:border-accent\" data-testid=\"button-print-guide\">\n                <Printer className=\"w-4 h-4 mr-2\" />\n                PRINT VERSION\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3394},"client/src/components/features-section.tsx":{"content":"export default function FeaturesSection() {\n  const features = [\n    {\n      id: 'mentorship-circles',\n      icon: '👥',\n      title: 'MENTORSHIP CIRCLES',\n      description: 'Guided small-group learning experiences where knowledge flows both ways',\n      color: 'primary'\n    },\n    {\n      id: 'skill-swaps',\n      icon: '🔄',\n      title: 'SKILL SWAPS',\n      description: 'Teach what you know, learn what you don\\'t in our peer-to-peer exchanges',\n      color: 'secondary'\n    },\n    {\n      id: 'storytelling',\n      icon: '📚',\n      title: 'STORYTELLING',\n      description: 'A library of wisdom and personal experiences shared across generations',\n      color: 'accent'\n    },\n    {\n      id: 'collaborative-projects',\n      icon: '🤝',\n      title: 'COLLABORATIVE PROJECTS',\n      description: 'Join forces on creative and practical tasks that bridge generations',\n      color: 'destructive'\n    },\n    {\n      id: 'workshops',\n      icon: '🎓',\n      title: 'WORKSHOPS',\n      description: 'Structured, interactive events designed for collaborative learning',\n      color: 'primary'\n    },\n    {\n      id: 'social-spaces',\n      icon: '💬',\n      title: 'SOCIAL SPACES',\n      description: 'Safe, casual conversations in our welcoming community rooms',\n      color: 'secondary'\n    }\n  ];\n\n  return (\n    <section id=\"features\" className=\"py-20 bg-background\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"font-arcade text-primary text-2xl md:text-4xl mb-6\" data-testid=\"text-features-title\">\n            EXPLORE BRIDGEN'S KEY FEATURES\n          </h2>\n          <p className=\"text-xl text-muted-foreground\">Everything you need to connect and learn</p>\n        </div>\n        \n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {features.map((feature) => (\n            <div \n              key={feature.id}\n              className={`arcade-button bg-card rounded-lg p-8 text-center border-2 border-${feature.color} hover:border-${feature.color} hover:glow cursor-pointer`}\n              data-testid={`card-feature-${feature.id}`}\n            >\n              <div className=\"text-5xl mb-4\">{feature.icon}</div>\n              <h3 className={`font-arcade text-${feature.color} text-sm mb-4`}>{feature.title}</h3>\n              <p className=\"text-muted-foreground text-lg leading-relaxed\">{feature.description}</p>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2527},"client/src/components/follow-us-section.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Mail } from \"lucide-react\";\n\nexport default function FollowUsSection() {\n  return (\n    <section id=\"follow-us\" className=\"py-20 bg-background\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"font-arcade text-primary text-2xl md:text-4xl mb-6\" data-testid=\"text-follow-us-title\">STAY CONNECTED</h2>\n          <p className=\"text-xl text-muted-foreground\">Join our growing community across all platforms</p>\n        </div>\n        \n        <div className=\"grid lg:grid-cols-3 gap-12\">\n          {/* Social Media */}\n          <div className=\"text-center\">\n            <h3 className=\"font-arcade text-secondary text-lg mb-6\">FOLLOW US</h3>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <Button className=\"arcade-button bg-card text-foreground p-6 rounded-lg border-2 border-secondary hover:glow\" data-testid=\"button-social-facebook\">\n                <div className=\"text-center\">\n                  <div className=\"text-3xl mb-2\">📘</div>\n                  <span className=\"text-sm\">Facebook</span>\n                </div>\n              </Button>\n              <Button className=\"arcade-button bg-card text-foreground p-6 rounded-lg border-2 border-secondary hover:glow\" data-testid=\"button-social-twitter\">\n                <div className=\"text-center\">\n                  <div className=\"text-3xl mb-2\">🐦</div>\n                  <span className=\"text-sm\">Twitter</span>\n                </div>\n              </Button>\n              <Button className=\"arcade-button bg-card text-foreground p-6 rounded-lg border-2 border-secondary hover:glow\" data-testid=\"button-social-instagram\">\n                <div className=\"text-center\">\n                  <div className=\"text-3xl mb-2\">📷</div>\n                  <span className=\"text-sm\">Instagram</span>\n                </div>\n              </Button>\n              <Button className=\"arcade-button bg-card text-foreground p-6 rounded-lg border-2 border-secondary hover:glow\" data-testid=\"button-social-youtube\">\n                <div className=\"text-center\">\n                  <div className=\"text-3xl mb-2\">📺</div>\n                  <span className=\"text-sm\">YouTube</span>\n                </div>\n              </Button>\n            </div>\n          </div>\n          \n          {/* Newsletter */}\n          <div className=\"text-center\">\n            <h3 className=\"font-arcade text-accent text-lg mb-6\">NEWSLETTER</h3>\n            <div className=\"bg-card rounded-lg p-6\" data-testid=\"card-newsletter\">\n              <div className=\"text-4xl mb-4\">📧</div>\n              <p className=\"text-muted-foreground mb-6\">Get weekly updates, success stories, and tips</p>\n              <div className=\"space-y-4\">\n                <Input \n                  type=\"email\" \n                  placeholder=\"your.email@example.com\" \n                  className=\"w-full p-3 rounded bg-background border border-border text-foreground text-lg focus:border-accent\"\n                  data-testid=\"input-newsletter-email\"\n                />\n                <Button className=\"arcade-button w-full bg-accent text-accent-foreground py-3 rounded-full font-arcade text-sm\" data-testid=\"button-newsletter-subscribe\">\n                  <Mail className=\"w-4 h-4 mr-2\" />\n                  SUBSCRIBE\n                </Button>\n              </div>\n            </div>\n          </div>\n          \n          {/* Community Stats */}\n          <div className=\"text-center\">\n            <h3 className=\"font-arcade text-primary text-lg mb-6\">COMMUNITY IMPACT</h3>\n            <div className=\"bg-card rounded-lg p-6 space-y-6\" data-testid=\"card-community-stats\">\n              <div>\n                <div className=\"text-3xl font-bold text-primary mb-1\" data-testid=\"text-stat-mentorship-hours\">15,847</div>\n                <p className=\"text-sm text-muted-foreground\">Mentorship Hours</p>\n              </div>\n              <div>\n                <div className=\"text-3xl font-bold text-secondary mb-1\" data-testid=\"text-stat-stories-shared\">3,291</div>\n                <p className=\"text-sm text-muted-foreground\">Stories Shared</p>\n              </div>\n              <div>\n                <div className=\"text-3xl font-bold text-accent mb-1\" data-testid=\"text-stat-projects-started\">892</div>\n                <p className=\"text-sm text-muted-foreground\">Projects Started</p>\n              </div>\n              <div>\n                <div className=\"text-3xl font-bold text-destructive mb-1\" data-testid=\"text-stat-countries-connected\">47</div>\n                <p className=\"text-sm text-muted-foreground\">Countries Connected</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4854},"client/src/components/footer.tsx":{"content":"export default function Footer() {\n  return (\n    <footer className=\"bg-arcade-black text-foreground py-12 border-t border-border\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid md:grid-cols-4 gap-8\">\n          <div>\n            <div className=\"font-arcade text-primary text-xl mb-4\" data-testid=\"text-footer-logo\">BRIDGEN</div>\n            <p className=\"text-muted-foreground text-sm mb-4\">Connecting generations through shared wisdom and learning.</p>\n            <div className=\"flex space-x-1\">\n              <div className=\"w-2 h-2 bg-pac-yellow rounded-full\"></div>\n              <div className=\"w-2 h-2 bg-pac-yellow rounded-full\"></div>\n              <div className=\"w-2 h-2 bg-pac-yellow rounded-full\"></div>\n              <div className=\"w-2 h-2 bg-pac-yellow rounded-full\"></div>\n              <div className=\"w-2 h-2 bg-pac-yellow rounded-full\"></div>\n            </div>\n          </div>\n          \n          <div>\n            <h3 className=\"font-arcade text-secondary text-sm mb-4\">FEATURES</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li><a href=\"#features\" className=\"text-muted-foreground hover:text-secondary\" data-testid=\"link-footer-mentorship\">Mentorship Circles</a></li>\n              <li><a href=\"#features\" className=\"text-muted-foreground hover:text-secondary\" data-testid=\"link-footer-skill-swaps\">Skill Swaps</a></li>\n              <li><a href=\"#features\" className=\"text-muted-foreground hover:text-secondary\" data-testid=\"link-footer-storytelling\">Storytelling</a></li>\n              <li><a href=\"#features\" className=\"text-muted-foreground hover:text-secondary\" data-testid=\"link-footer-workshops\">Workshops</a></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h3 className=\"font-arcade text-accent text-sm mb-4\">SUPPORT</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li><a href=\"#resources\" className=\"text-muted-foreground hover:text-accent\" data-testid=\"link-footer-help\">Help Center</a></li>\n              <li><a href=\"#resources\" className=\"text-muted-foreground hover:text-accent\" data-testid=\"link-footer-tutorials\">Video Tutorials</a></li>\n              <li><a href=\"#resources\" className=\"text-muted-foreground hover:text-accent\" data-testid=\"link-footer-guidelines\">Community Guidelines</a></li>\n              <li><a href=\"#\" className=\"text-muted-foreground hover:text-accent\" data-testid=\"link-footer-contact\">Contact Us</a></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h3 className=\"font-arcade text-primary text-sm mb-4\">LEGAL</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary\" data-testid=\"link-footer-privacy\">Privacy Policy</a></li>\n              <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary\" data-testid=\"link-footer-terms\">Terms of Service</a></li>\n              <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary\" data-testid=\"link-footer-cookies\">Cookie Policy</a></li>\n              <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary\" data-testid=\"link-footer-accessibility\">Accessibility</a></li>\n            </ul>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-border mt-12 pt-8 text-center\">\n          <p className=\"text-muted-foreground text-sm\" data-testid=\"text-footer-copyright\">\n            © 2024 Bridgen. Made with ❤️ for connecting generations.\n          </p>\n          <div className=\"flex justify-center items-center mt-4 space-x-2\">\n            <span className=\"text-xs text-muted-foreground\">Powered by</span>\n            <div className=\"text-lg\">🟡</div>\n            <span className=\"text-xs text-muted-foreground\">arcade nostalgia</span>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":3908},"client/src/components/get-started-section.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Rocket } from \"lucide-react\";\n\nexport default function GetStartedSection() {\n  return (\n    <section id=\"get-started\" className=\"py-20 bg-muted\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n        <h2 className=\"font-arcade text-primary text-2xl md:text-4xl mb-6\" data-testid=\"text-get-started-title\">START YOUR JOURNEY</h2>\n        <p className=\"text-xl text-muted-foreground mb-12\">Follow Pac-Man through your Bridgen adventure</p>\n        \n        {/* Interactive Onboarding Maze */}\n        <div className=\"bg-card rounded-lg p-8 maze-pattern\" data-testid=\"container-onboarding-maze\">\n          <div className=\"relative\">\n            {/* Maze Path */}\n            <div className=\"flex items-center justify-center space-x-8 mb-8\">\n              <div className=\"flex flex-col items-center\">\n                <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center text-2xl mb-2\" data-testid=\"step-start\">🟡</div>\n                <p className=\"text-sm text-primary font-arcade\">START</p>\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-3 h-3 bg-pac-yellow rounded-full\"></div>\n                <div className=\"w-3 h-3 bg-pac-yellow rounded-full\"></div>\n                <div className=\"w-3 h-3 bg-pac-yellow rounded-full\"></div>\n              </div>\n              \n              <div className=\"flex flex-col items-center\">\n                <div className=\"w-16 h-16 bg-secondary rounded-full flex items-center justify-center text-xl mb-2\" data-testid=\"step-join-circle\">👥</div>\n                <p className=\"text-xs text-secondary font-arcade\">JOIN CIRCLE</p>\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-3 h-3 bg-pac-yellow rounded-full\"></div>\n                <div className=\"w-3 h-3 bg-pac-yellow rounded-full\"></div>\n                <div className=\"w-3 h-3 bg-pac-yellow rounded-full\"></div>\n              </div>\n              \n              <div className=\"flex flex-col items-center\">\n                <div className=\"w-16 h-16 bg-accent rounded-full flex items-center justify-center text-xl mb-2\" data-testid=\"step-skill-swap\">🔄</div>\n                <p className=\"text-xs text-accent font-arcade\">SKILL SWAP</p>\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-3 h-3 bg-pac-yellow rounded-full\"></div>\n                <div className=\"w-3 h-3 bg-pac-yellow rounded-full\"></div>\n                <div className=\"w-3 h-3 bg-pac-yellow rounded-full\"></div>\n              </div>\n              \n              <div className=\"flex flex-col items-center\">\n                <div className=\"w-16 h-16 bg-destructive rounded-full flex items-center justify-center text-xl mb-2\" data-testid=\"step-success\">🏆</div>\n                <p className=\"text-xs text-destructive font-arcade\">SUCCESS!</p>\n              </div>\n            </div>\n            \n            {/* Steps Description */}\n            <div className=\"grid md:grid-cols-3 gap-6 mb-8\">\n              <div className=\"text-center\">\n                <h4 className=\"font-arcade text-secondary text-sm mb-2\">STEP 1: JOIN A CIRCLE</h4>\n                <p className=\"text-sm text-muted-foreground\">Find a mentorship group that matches your interests</p>\n              </div>\n              <div className=\"text-center\">\n                <h4 className=\"font-arcade text-accent text-sm mb-2\">STEP 2: TRY A SKILL SWAP</h4>\n                <p className=\"text-sm text-muted-foreground\">Share your knowledge and learn something new</p>\n              </div>\n              <div className=\"text-center\">\n                <h4 className=\"font-arcade text-destructive text-sm mb-2\">STEP 3: CELEBRATE SUCCESS</h4>\n                <p className=\"text-sm text-muted-foreground\">Earn badges and make meaningful connections</p>\n              </div>\n            </div>\n          </div>\n          \n          <Button className=\"arcade-button bg-primary text-primary-foreground px-12 py-6 rounded-full font-arcade text-lg hover:glow\" data-testid=\"button-begin-adventure\">\n            <Rocket className=\"w-5 h-5 mr-3\" />\n            BEGIN ADVENTURE\n          </Button>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4412},"client/src/components/hero-section.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Play, Users } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport AnimatedPacman from \"./animated-pacman\";\nimport KonamiCode from \"./konami-code\";\nimport TypewriterText from \"./typewriter-text\";\n\nexport default function HeroSection() {\n  return (\n    <section id=\"home\" className=\"relative bg-arcade-black min-h-screen flex items-center justify-center overflow-hidden\">\n      <KonamiCode />\n      \n      {/* Animated Pac-Man */}\n      <div className=\"absolute top-1/2 left-0 transform -translate-y-1/2 pacman-move z-10\">\n        <AnimatedPacman size={80} />\n      </div>\n      \n      {/* Dot Trail - positioned along pac man's path */}\n      <div className=\"absolute top-1/2 left-20 transform -translate-y-1/2 z-0\">\n        <div className=\"w-4 h-4 bg-pac-yellow rounded-full dot-trail glow-dot\" style={{animationDelay: '3s'}}></div>\n      </div>\n      <div className=\"absolute top-1/2 left-40 transform -translate-y-1/2 z-0\">\n        <div className=\"w-4 h-4 bg-ghost-orange rounded-full dot-trail glow-dot\" style={{animationDelay: '4s'}}></div>\n      </div>\n      <div className=\"absolute top-1/2 left-60 transform -translate-y-1/2 z-0\">\n        <div className=\"w-4 h-4 bg-cherry-red rounded-full dot-trail glow-dot\" style={{animationDelay: '5s'}}></div>\n      </div>\n      <div className=\"absolute top-1/2 left-80 transform -translate-y-1/2 z-0\">\n        <div className=\"w-4 h-4 bg-arcade-blue rounded-full dot-trail glow-dot\" style={{animationDelay: '6s'}}></div>\n      </div>\n      <div className=\"absolute top-1/2 left-96 transform -translate-y-1/2 z-0\">\n        <div className=\"w-5 h-5 bg-pac-yellow rounded-full dot-trail power-pellet\" style={{animationDelay: '7s'}}></div>\n      </div>\n      \n      <div className=\"relative z-20 text-center max-w-4xl mx-auto px-4\">\n        <h1 className=\"font-arcade text-primary text-2xl md:text-4xl lg:text-6xl mb-8 leading-tight\" data-testid=\"text-hero-title\">\n          CONNECTING GENERATIONS\n        </h1>\n        <h2 className=\"font-arcade text-secondary text-lg md:text-2xl lg:text-3xl mb-8\" data-testid=\"text-hero-subtitle\">\n          <TypewriterText text=\"One Life Lesson at a Time\" delay={150} />\n        </h2>\n        \n        <p className=\"text-xl md:text-2xl text-muted-foreground mb-12 leading-relaxed max-w-3xl mx-auto\" data-testid=\"text-hero-description\">\n          Bridgen is a digital community where seniors and teens (14+) share wisdom, exchange skills, and grow together through mentorship, storytelling, and collaborative learning.\n        </p>\n        \n        <div className=\"flex flex-col sm:flex-row gap-6 justify-center\">\n          <Link href=\"/gamification\">\n            <Button className=\"arcade-button bg-primary text-primary-foreground px-12 py-6 rounded-full font-arcade text-lg hover:glow\" data-testid=\"button-get-started\">\n              <Play className=\"w-5 h-5 mr-3\" />\n              GET STARTED\n            </Button>\n          </Link>\n          <Link href=\"/chat\">\n            <Button className=\"arcade-button bg-secondary text-secondary-foreground px-12 py-6 rounded-full font-arcade text-lg hover:glow\" data-testid=\"button-follow-us\">\n              <Users className=\"w-5 h-5 mr-3\" />\n              JOIN CHAT\n            </Button>\n          </Link>\n        </div>\n        \n        {/* Spotlight Section */}\n        <div className=\"grid md:grid-cols-3 gap-8 mt-16\">\n          <Link href=\"/features\">\n            <div className=\"bg-card border-2 border-primary rounded-lg p-6 text-center hover:glow transition-all arcade-button cursor-pointer\" data-testid=\"card-mentorship-circles\">\n              <div className=\"text-4xl mb-4 pixel-sparkle\">👥</div>\n              <h3 className=\"font-arcade text-primary text-sm mb-2\">MENTORSHIP CIRCLES</h3>\n              <p className=\"text-muted-foreground text-lg\">Guided small-group learning experiences</p>\n            </div>\n          </Link>\n          <Link href=\"/features\">\n            <div className=\"bg-card border-2 border-secondary rounded-lg p-6 text-center hover:glow transition-all arcade-button cursor-pointer\" data-testid=\"card-skill-swaps\">\n              <div className=\"text-4xl mb-4 pixel-sparkle\">🔄</div>\n              <h3 className=\"font-arcade text-secondary text-sm mb-2\">SKILL SWAPS</h3>\n              <p className=\"text-muted-foreground text-lg\">Teach what you know, learn what you don't</p>\n            </div>\n          </Link>\n          <Link href=\"/features\">\n            <div className=\"bg-card border-2 border-accent rounded-lg p-6 text-center hover:glow transition-all arcade-button cursor-pointer\" data-testid=\"card-storytelling\">\n              <div className=\"text-4xl mb-4 pixel-sparkle\">📚</div>\n              <h3 className=\"font-arcade text-accent text-sm mb-2\">STORYTELLING</h3>\n              <p className=\"text-muted-foreground text-lg\">A library of wisdom and experiences</p>\n            </div>\n          </Link>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4986},"client/src/components/konami-code.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Confetti from \"react-confetti\";\nimport { useWindowSize } from \"react-use\";\n\nconst KONAMI_CODE = [\n  'ArrowUp', 'ArrowUp', 'ArrowDown', 'ArrowDown',\n  'ArrowLeft', 'ArrowRight', 'ArrowLeft', 'ArrowRight',\n  'KeyB', 'KeyA'\n];\n\nexport default function KonamiCode() {\n  const [sequence, setSequence] = useState<string[]>([]);\n  const [activated, setActivated] = useState(false);\n  const { width, height } = useWindowSize();\n\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      setSequence(prev => {\n        const newSequence = [...prev, event.code].slice(-10);\n        \n        if (newSequence.length === KONAMI_CODE.length) {\n          const isMatch = newSequence.every((key, index) => key === KONAMI_CODE[index]);\n          if (isMatch) {\n            setActivated(true);\n            setTimeout(() => setActivated(false), 5000);\n            // Play retro sound effect (simulate with console for now)\n            console.log('🎵 KONAMI CODE ACTIVATED! 🎵');\n            return [];\n          }\n        }\n        \n        return newSequence;\n      });\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, []);\n\n  if (!activated) return null;\n\n  return (\n    <div className=\"fixed inset-0 pointer-events-none z-50\">\n      <Confetti\n        width={width}\n        height={height}\n        numberOfPieces={200}\n        recycle={false}\n        colors={['#FFFF00', '#0066FF', '#FF6600', '#FF0066']}\n      />\n      <div className=\"absolute inset-0 flex items-center justify-center\">\n        <div className=\"bg-primary text-primary-foreground px-8 py-4 rounded-lg font-arcade text-2xl animate-bounce\">\n          🎮 KONAMI CODE ACTIVATED! 🎮\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":1845},"client/src/components/match-me-section.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useMatchMe, UserProfile } from \"../hooks/useMatchMe\";\n\ninterface MatchMeSectionProps {\n  currentUser: UserProfile;\n}\n\nexport default function MatchMeSection({ currentUser }: MatchMeSectionProps) {\n  const {\n    matches,\n    topMatch,\n    isQueued,\n    isAutoMatch,\n    notifications,\n    startAutoMatch,\n    stopAutoMatch,\n    manualRequestMatch,\n    acceptTopMatch,\n    updateProfile,\n  } = useMatchMe(currentUser);\n\n  const [localProfile, setLocalProfile] = useState<UserProfile | null>(currentUser ?? null);\n\n  useEffect(() => {\n    setLocalProfile(currentUser);\n  }, [currentUser]);\n\n  return (\n    <section id=\"match-me\" className=\"py-20 bg-background\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-6\">\n          <h2 className=\"font-arcade text-primary text-2xl md:text-4xl mb-2\">FIND YOUR MATCH</h2>\n          <p className=\"text-sm text-muted-foreground\">Real-time auto-sync matchmaking</p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-6\">\n          {/* Controls */}\n          <div className=\"bg-card rounded-lg p-6\">\n            <h3 className=\"font-medium mb-2\">Your Profile</h3>\n            {localProfile ? (\n              <>\n                <div className=\"text-sm mb-2\">ID: {localProfile.id}</div>\n                <div className=\"text-sm mb-2\">\n                  Skills: {localProfile.skills?.length ? localProfile.skills.join(\", \") : \"None listed\"}\n                </div>\n              </>\n            ) : (\n              <div className=\"text-sm text-muted-foreground\">Loading profile...</div>\n            )}\n\n            <div className=\"flex gap-2 mt-4\">\n              <Button onClick={isAutoMatch ? stopAutoMatch : startAutoMatch} className=\"w-full\">\n                {isAutoMatch ? \"Stop Auto-Match\" : \"Start Auto-Match\"}\n              </Button>\n              <Button onClick={manualRequestMatch} variant=\"outline\" className=\"w-full\">\n                Find Now\n              </Button>\n            </div>\n\n            <div className=\"mt-4 text-xs text-muted-foreground\">\n              {isQueued ? \"⏳ Searching for matches...\" : \"❌ Not searching\"}\n            </div>\n\n            <div className=\"mt-4\">\n              <h4 className=\"text-sm font-medium\">Notifications</h4>\n              <ul className=\"text-xs text-muted-foreground list-disc pl-4\">\n                {notifications?.length ? (\n                  notifications.map((n, i) => <li key={i}>{n}</li>)\n                ) : (\n                  <li>No notifications</li>\n                )}\n              </ul>\n            </div>\n          </div>\n\n          {/* Top match */}\n          <div className=\"bg-card rounded-lg p-6\">\n            <h3 className=\"font-medium mb-3\">Top Match</h3>\n            {topMatch ? (\n              <>\n                <div className=\"mb-3\">\n                  <div className=\"text-lg font-bold\">{topMatch.username ?? topMatch.userId}</div>\n                  <div className=\"text-sm text-muted-foreground\">\n                    Skills: {topMatch.sharedSkills?.join(\", \") || \"No shared skills\"}\n                  </div>\n                  {topMatch.sharedAvailability?.length && topMatch.sharedAvailability.length > 0 && (\n                    <div className=\"text-xs\">\n                      Availability overlap: {topMatch.sharedAvailability?.join(\", \")}\n                    </div>\n                  )}\n                </div>\n                <div className=\"mb-3\">\n                  Compatibility: <strong>{topMatch.score ?? \"N/A\"}</strong>\n                </div>\n                <Button onClick={acceptTopMatch} className=\"w-full bg-accent\">\n                  Auto-Sync Session\n                </Button>\n              </>\n            ) : (\n              <div className=\"text-sm text-muted-foreground\">No matches yet</div>\n            )}\n          </div>\n\n          {/* Match list */}\n          <div className=\"bg-card rounded-lg p-6\">\n            <h3 className=\"font-medium mb-3\">Other Matches</h3>\n            {matches?.length === 0 ? (\n              <div className=\"text-sm text-muted-foreground\">No matches yet</div>\n            ) : (\n              matches.map((m) => (\n                <div key={m.userId} className=\"p-3 border rounded flex justify-between items-center\">\n                  <div>\n                    <div className=\"font-medium\">{m.username ?? m.userId}</div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {m.sharedSkills?.join(\", \") || \"No shared skills\"}\n                    </div>\n                  </div>\n                  <div className=\"text-sm font-bold\">{m.score ?? \"N/A\"}</div>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4849},"client/src/components/navigation.tsx":{"content":"import { Menu } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link, useLocation } from \"wouter\";\n\nexport default function Navigation() {\n  const [location] = useLocation();\n  \n  const isActive = (path: string) => location === path;\n\n  return (\n    <nav className=\"bg-card border-b border-border sticky top-0 z-40\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"text-primary font-arcade text-xl\" data-testid=\"text-logo\">BRIDGEN</div>\n            <div className=\"hidden md:flex space-x-1\">\n              <div className=\"w-2 h-2 bg-pac-yellow rounded-full\"></div>\n              <div className=\"w-2 h-2 bg-pac-yellow rounded-full\"></div>\n              <div className=\"w-2 h-2 bg-pac-yellow rounded-full\"></div>\n            </div>\n          </div>\n          \n          <div className=\"hidden md:flex space-x-8\">\n            <Link href=\"/\" className={`transition-colors text-lg arcade-button ${\n              isActive('/') ? 'text-primary' : 'text-foreground hover:text-primary'\n            }`} data-testid=\"link-home\">\n              Home\n            </Link>\n            <Link href=\"/profile\" className={`transition-colors text-lg arcade-button ${\n              isActive('/profile') ? 'text-primary' : 'text-foreground hover:text-primary'\n            }`} data-testid=\"link-profile\">\n              Profile\n            </Link>\n            <Link href=\"/features\" className={`transition-colors text-lg arcade-button ${\n              isActive('/features') ? 'text-primary' : 'text-foreground hover:text-primary'\n            }`} data-testid=\"link-features\">\n              Features\n            </Link>\n            <Link href=\"/chat\" className={`transition-colors text-lg arcade-button ${\n              isActive('/chat') ? 'text-primary' : 'text-foreground hover:text-primary'\n            }`} data-testid=\"link-chat\">\n              Chat\n            </Link>\n            <Link href=\"/games\" className={`transition-colors text-lg arcade-button ${\n              isActive('/games') ? 'text-primary' : 'text-foreground hover:text-primary'\n            }`} data-testid=\"link-games\">\n              Games\n            </Link>\n          </div>\n          \n          <Button variant=\"ghost\" className=\"md:hidden text-foreground\" data-testid=\"button-mobile-menu\">\n            <Menu className=\"h-6 w-6\" />\n          </Button>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":2541},"client/src/components/profile-section.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Edit, Plus } from \"lucide-react\";\n\nexport default function ProfileSection() {\n  return (\n    <section id=\"profile\" className=\"py-20 bg-muted\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"font-arcade text-primary text-2xl md:text-4xl mb-6\" data-testid=\"text-profile-title\">YOUR PROFILE</h2>\n          <p className=\"text-xl text-muted-foreground\">Customize your Bridgen experience</p>\n        </div>\n        \n        <div className=\"bg-card rounded-lg p-8\">\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {/* Profile Picture & Avatar */}\n            <div className=\"text-center\">\n              <div className=\"w-32 h-32 mx-auto mb-6 bg-primary rounded-full flex items-center justify-center text-6xl\" data-testid=\"img-profile-avatar\">\n                👻\n              {/* You can replace the '👻' with a user's profile picture or initials */}\n              </div>\n              <h3 className=\"font-arcade text-primary text-sm mb-4\">CHOOSE AVATAR</h3>\n              <div className=\"flex justify-center space-x-2 mb-6\">\n                <button className=\"w-12 h-12 bg-pac-yellow rounded-full flex items-center justify-center text-xl hover:glow\" data-testid=\"button-avatar-pacman\">🟡</button>\n                <button className=\"w-12 h-12 bg-secondary rounded-full flex items-center justify-center text-xl hover:glow\" data-testid=\"button-avatar-ghost\">👻</button>\n                <button className=\"w-12 h-12 bg-destructive rounded-full flex items-center justify-center text-xl hover:glow\" data-testid=\"button-avatar-demon\">👹</button>\n                <button className=\"w-12 h-12 bg-accent rounded-full flex items-center justify-center text-xl hover:glow\" data-testid=\"button-avatar-wizard\">🧙</button>\n              </div>\n              <Button className=\"arcade-button bg-primary text-primary-foreground px-6 py-2 rounded-full font-arcade text-xs\" data-testid=\"button-upload-photo\">\n                UPLOAD PHOTO\n              </Button>\n            </div>\n            \n            {/* Skills & Interests */}\n            <div className=\"lg:col-span-2\">\n              <div className=\"grid gap-6\">\n                {/* Skills You Can Teach */}\n                <div>\n                  <h3 className=\"font-arcade text-secondary text-sm mb-3\">SKILLS YOU CAN TEACH</h3>\n                  <div className=\"flex flex-wrap gap-2\">\n                    <span className=\"bg-secondary text-secondary-foreground px-3 py-1 rounded-full text-sm\" data-testid=\"tag-skill-cooking\">Cooking</span>\n                    <span className=\"bg-secondary text-secondary-foreground px-3 py-1 rounded-full text-sm\" data-testid=\"tag-skill-gardening\">Gardening</span>\n                    <span className=\"bg-secondary text-secondary-foreground px-3 py-1 rounded-full text-sm\" data-testid=\"tag-skill-history\">History</span>\n                    <button className=\"bg-background text-foreground px-3 py-1 rounded-full text-sm border border-border hover:border-secondary\" data-testid=\"button-add-teach-skill\">\n                      <Plus className=\"w-3 h-3 mr-1 inline\" />Add Skill\n                    </button>\n                  </div>\n                </div>\n                \n                {/* Skills You're Learning */}\n                <div>\n                  <h3 className=\"font-arcade text-accent text-sm mb-3\">SKILLS YOU'RE LEARNING</h3>\n                  <div className=\"flex flex-wrap gap-2\">\n                    <span className=\"bg-accent text-accent-foreground px-3 py-1 rounded-full text-sm\" data-testid=\"tag-learning-social-media\">Social Media</span>\n                    <span className=\"bg-accent text-accent-foreground px-3 py-1 rounded-full text-sm\" data-testid=\"tag-learning-photography\">Photography</span>\n                    <button className=\"bg-background text-foreground px-3 py-1 rounded-full text-sm border border-border hover:border-accent\" data-testid=\"button-add-learning-skill\">\n                      <Plus className=\"w-3 h-3 mr-1 inline\" />Add Interest\n                    </button>\n                  </div>\n                </div>\n                \n                {/* Stories & Badges */}\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div>\n                    <h3 className=\"font-arcade text-primary text-sm mb-3\">STORIES SHARED</h3>\n                    <div className=\"text-2xl font-bold text-primary\" data-testid=\"text-stories-count\">7</div>\n                    <p className=\"text-sm text-muted-foreground\">Total stories published</p>\n                  </div>\n                  <div>\n                    <h3 className=\"font-arcade text-destructive text-sm mb-3\">BADGES EARNED</h3>\n                    <div className=\"flex space-x-2\" data-testid=\"container-badges\">\n                      <div className=\"text-2xl\" title=\"First Story\">🍒</div>\n                      <div className=\"text-2xl\" title=\"Helpful Mentor\">🍓</div>\n                      <div className=\"text-2xl\" title=\"Active Learner\">🍊</div>\n                      <div className=\"text-2xl\" title=\"Community Builder\">🍎</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <Button className=\"arcade-button w-full mt-8 bg-primary text-primary-foreground py-3 rounded-full font-arcade text-sm\" data-testid=\"button-edit-profile\">\n                <Edit className=\"w-4 h-4 mr-2\" />\n                EDIT PROFILE\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5658},"client/src/components/resources-section.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Play } from \"lucide-react\";\n\nexport default function ResourcesSection() {\n  return (\n    <section id=\"resources\" className=\"py-20 bg-background\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"font-arcade text-primary text-2xl md:text-4xl mb-6\" data-testid=\"text-resources-title\">LEARN AND EXPLORE</h2>\n          <p className=\"text-xl text-muted-foreground\">Your guide to getting the most out of Bridgen</p>\n        </div>\n        \n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* FAQs */}\n          <div className=\"bg-card rounded-lg p-8 border-2 border-primary\" data-testid=\"card-faqs\">\n            <div className=\"text-center mb-6\">\n              <div className=\"text-5xl mb-4\">❓</div>\n              <h3 className=\"font-arcade text-primary text-lg mb-4\">FAQS</h3>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <div className=\"border-b border-border pb-4\">\n                <h4 className=\"text-foreground font-medium mb-2\">How do I join a mentorship circle?</h4>\n                <p className=\"text-sm text-muted-foreground\">Click on Features, then Mentorship Circles, and browse available groups that match your interests.</p>\n              </div>\n              <div className=\"border-b border-border pb-4\">\n                <h4 className=\"text-foreground font-medium mb-2\">Is Bridgen safe for seniors?</h4>\n                <p className=\"text-sm text-muted-foreground\">Yes! We have strict verification, moderation, and privacy controls to ensure a safe environment.</p>\n              </div>\n              <div>\n                <h4 className=\"text-foreground font-medium mb-2\">Can I use voice chat?</h4>\n                <p className=\"text-sm text-muted-foreground\">Absolutely! We support both text and voice messaging for comfortable communication.</p>\n              </div>\n            </div>\n            \n            <Button className=\"arcade-button w-full mt-6 bg-primary text-primary-foreground py-3 rounded-full font-arcade text-sm\" data-testid=\"button-view-all-faqs\">\n              VIEW ALL FAQS\n            </Button>\n          </div>\n          \n          {/* Video Tutorials */}\n          <div className=\"bg-card rounded-lg p-8 border-2 border-secondary\" data-testid=\"card-video-tutorials\">\n            <div className=\"text-center mb-6\">\n              <div className=\"text-5xl mb-4\">🎥</div>\n              <h3 className=\"font-arcade text-secondary text-lg mb-4\">VIDEO TUTORIALS</h3>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <div className=\"bg-background rounded p-4 flex items-center space-x-3\">\n                <div className=\"w-12 h-12 bg-secondary rounded flex items-center justify-center\">\n                  <Play className=\"w-5 h-5 text-secondary-foreground\" />\n                </div>\n                <div>\n                  <h4 className=\"text-foreground font-medium\">Getting Started Guide</h4>\n                  <p className=\"text-xs text-muted-foreground\">5 minutes</p>\n                </div>\n              </div>\n              \n              <div className=\"bg-background rounded p-4 flex items-center space-x-3\">\n                <div className=\"w-12 h-12 bg-secondary rounded flex items-center justify-center\">\n                  <Play className=\"w-5 h-5 text-secondary-foreground\" />\n                </div>\n                <div>\n                  <h4 className=\"text-foreground font-medium\">Creating Your Profile</h4>\n                  <p className=\"text-xs text-muted-foreground\">3 minutes</p>\n                </div>\n              </div>\n              \n              <div className=\"bg-background rounded p-4 flex items-center space-x-3\">\n                <div className=\"w-12 h-12 bg-secondary rounded flex items-center justify-center\">\n                  <Play className=\"w-5 h-5 text-secondary-foreground\" />\n                </div>\n                <div>\n                  <h4 className=\"text-foreground font-medium\">Using Chat Features</h4>\n                  <p className=\"text-xs text-muted-foreground\">7 minutes</p>\n                </div>\n              </div>\n            </div>\n            \n            <Button className=\"arcade-button w-full mt-6 bg-secondary text-secondary-foreground py-3 rounded-full font-arcade text-sm\" data-testid=\"button-watch-tutorials\">\n              WATCH TUTORIALS\n            </Button>\n          </div>\n          \n          {/* Community Guidelines */}\n          <div className=\"bg-card rounded-lg p-8 border-2 border-accent\" data-testid=\"card-community-guidelines\">\n            <div className=\"text-center mb-6\">\n              <div className=\"text-5xl mb-4\">🤝</div>\n              <h3 className=\"font-arcade text-accent text-lg mb-4\">COMMUNITY GUIDELINES</h3>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-2 h-2 bg-accent rounded-full mt-2 flex-shrink-0\"></div>\n                <p className=\"text-sm text-muted-foreground\">Be respectful and kind to all community members</p>\n              </div>\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-2 h-2 bg-accent rounded-full mt-2 flex-shrink-0\"></div>\n                <p className=\"text-sm text-muted-foreground\">Share knowledge and experiences openly</p>\n              </div>\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-2 h-2 bg-accent rounded-full mt-2 flex-shrink-0\"></div>\n                <p className=\"text-sm text-muted-foreground\">Maintain privacy and confidentiality</p>\n              </div>\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-2 h-2 bg-accent rounded-full mt-2 flex-shrink-0\"></div>\n                <p className=\"text-sm text-muted-foreground\">Report inappropriate behavior</p>\n              </div>\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-2 h-2 bg-accent rounded-full mt-2 flex-shrink-0\"></div>\n                <p className=\"text-sm text-muted-foreground\">Have fun and learn together!</p>\n              </div>\n            </div>\n            \n            <Button className=\"arcade-button w-full mt-6 bg-accent text-accent-foreground py-3 rounded-full font-arcade text-sm\" data-testid=\"button-read-guidelines\">\n              READ FULL GUIDELINES\n            </Button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":6615},"client/src/components/typewriter-text.tsx":{"content":"import { useState, useEffect } from \"react\";\n\ninterface TypewriterTextProps {\n  text: string;\n  delay?: number;\n  className?: string;\n  onComplete?: () => void;\n  showCursor?: boolean;\n  cursorStyle?: 'blink' | 'pulse' | 'solid';\n  retroSound?: boolean;\n  speed?: number;\n}\n\nexport default function TypewriterText({ \n  text, \n  delay = 100, \n  speed,\n  className = \"\",\n  onComplete,\n  showCursor = true,\n  cursorStyle = 'blink',\n  retroSound = false\n}: TypewriterTextProps) {\n  const [displayText, setDisplayText] = useState(\"\");\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [showCursorChar, setShowCursorChar] = useState(true);\n  const [isComplete, setIsComplete] = useState(false);\n\n  const effectiveDelay = speed || delay;\n\n  // Cursor blinking effect\n  useEffect(() => {\n    if (!showCursor || isComplete) return;\n\n    const interval = setInterval(() => {\n      setShowCursorChar(prev => !prev);\n    }, cursorStyle === 'blink' ? 530 : cursorStyle === 'pulse' ? 300 : 1000);\n\n    return () => clearInterval(interval);\n  }, [showCursor, cursorStyle, isComplete]);\n\n  // Typewriter effect\n  useEffect(() => {\n    if (currentIndex < text.length) {\n      const timeout = setTimeout(() => {\n        setDisplayText(prev => prev + text[currentIndex]);\n        setCurrentIndex(prev => prev + 1);\n        \n        // Retro typing sound effect (visual feedback)\n        if (retroSound && text[currentIndex] !== ' ') {\n          const flash = document.createElement('div');\n          flash.style.position = 'fixed';\n          flash.style.top = '0';\n          flash.style.left = '0';\n          flash.style.width = '100%';\n          flash.style.height = '100%';\n          flash.style.backgroundColor = 'rgba(255, 255, 0, 0.05)';\n          flash.style.pointerEvents = 'none';\n          flash.style.zIndex = '9999';\n          document.body.appendChild(flash);\n          setTimeout(() => flash.remove(), 30);\n        }\n      }, effectiveDelay + Math.random() * 20); // Add slight variation\n\n      return () => clearTimeout(timeout);\n    } else if (!isComplete) {\n      setIsComplete(true);\n      if (onComplete) {\n        setTimeout(onComplete, 500);\n      }\n    }\n  }, [currentIndex, text, effectiveDelay, onComplete, isComplete, retroSound]);\n\n  // Reset when text changes\n  useEffect(() => {\n    setDisplayText(\"\");\n    setCurrentIndex(0);\n    setIsComplete(false);\n  }, [text]);\n\n  const getCursorClass = () => {\n    if (!showCursor) return '';\n    \n    switch (cursorStyle) {\n      case 'blink':\n        return showCursorChar ? 'opacity-100' : 'opacity-0';\n      case 'pulse':\n        return 'animate-pulse';\n      case 'solid':\n        return 'opacity-100';\n      default:\n        return showCursorChar ? 'opacity-100' : 'opacity-0';\n    }\n  };\n\n  const getCursorCharacter = () => {\n    if (isComplete && cursorStyle !== 'solid') return '';\n    return '|';\n  };\n\n  return (\n    <span className={`inline-block relative ${className}`} data-testid=\"typewriter-text\">\n      <span className=\"font-arcade\">\n        {displayText}\n      </span>\n      {showCursor && (\n        <span \n          className={`font-arcade text-pac-yellow transition-opacity duration-100 ${getCursorClass()}`}\n          style={{ \n            textShadow: '0 0 10px rgba(255, 255, 0, 0.8)',\n          }}\n        >\n          {getCursorCharacter()}\n        </span>\n      )}\n      \n      {/* Character typing effect */}\n      {retroSound && !isComplete && currentIndex < text.length && (\n        <span className=\"absolute -inset-1 bg-pac-yellow opacity-10 blur-sm animate-ping\" />\n      )}\n    </span>\n  );\n}","size_bytes":3583},"client/src/components/whats-new-section.tsx":{"content":"import { Button } from \"@/components/ui/button\";\n\nexport default function WhatsNewSection() {\n  return (\n    <section id=\"whats-new\" className=\"py-20 bg-muted\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"font-arcade text-primary text-2xl md:text-4xl mb-6\" data-testid=\"text-whats-new-title\">WHAT'S NEW</h2>\n          <p className=\"text-xl text-muted-foreground\">Stay updated with the latest from our community</p>\n        </div>\n        \n        {/* Game Level Map Style */}\n        <div className=\"relative maze-pattern rounded-lg p-8\">\n          <div className=\"grid gap-6\">\n            {/* Date Filters */}\n            <div className=\"flex flex-wrap gap-4 justify-center mb-8\">\n              <Button className=\"arcade-button bg-primary text-primary-foreground px-6 py-3 rounded-full font-arcade text-sm\" data-testid=\"button-filter-today\">\n                TODAY\n              </Button>\n              <Button className=\"arcade-button bg-card text-foreground px-6 py-3 rounded-full font-arcade text-sm border border-border\" data-testid=\"button-filter-week\">\n                THIS WEEK\n              </Button>\n              <Button className=\"arcade-button bg-card text-foreground px-6 py-3 rounded-full font-arcade text-sm border border-border\" data-testid=\"button-filter-month\">\n                THIS MONTH\n              </Button>\n            </div>\n            \n            {/* News Items */}\n            <div className=\"space-y-6\">\n              <div className=\"bg-card rounded-lg p-6 border-l-4 border-primary\" data-testid=\"card-news-success\">\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <h3 className=\"font-arcade text-primary text-sm mb-2\">🎉 SUCCESS STORY</h3>\n                    <p className=\"text-lg text-foreground mb-2\">Congratulations to Mary & Jordan for completing their art project!</p>\n                    <p className=\"text-muted-foreground\">2 hours ago</p>\n                  </div>\n                  <div className=\"text-2xl\">🏆</div>\n                </div>\n              </div>\n              \n              <div className=\"bg-card rounded-lg p-6 border-l-4 border-secondary\" data-testid=\"card-news-workshop\">\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <h3 className=\"font-arcade text-secondary text-sm mb-2\">🚀 NEW WORKSHOP</h3>\n                    <p className=\"text-lg text-foreground mb-2\">Digital Photography Basics - Join this Thursday at 3 PM</p>\n                    <p className=\"text-muted-foreground\">1 day ago</p>\n                  </div>\n                  <div className=\"text-2xl\">📸</div>\n                </div>\n              </div>\n              \n              <div className=\"bg-card rounded-lg p-6 border-l-4 border-accent\" data-testid=\"card-news-feature\">\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <h3 className=\"font-arcade text-accent text-sm mb-2\">✨ NEW FEATURE</h3>\n                    <p className=\"text-lg text-foreground mb-2\">Introducing Voice Messages in Chat Rooms</p>\n                    <p className=\"text-muted-foreground\">3 days ago</p>\n                  </div>\n                  <div className=\"text-2xl\">🎙️</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3502},"client/src/components/zoom-meeting.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Video, VideoOff, Mic, MicOff, Monitor, Users, Calendar, ExternalLink } from \"lucide-react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface MeetingRoom {\n  id: string;\n  name: string;\n  description: string;\n  creator: {\n    id: string;\n    username: string;\n  };\n  zoom_meeting_id: string;\n  zoom_join_url: string;\n  scheduled_time: string | null;\n  max_participants: number;\n  is_active: boolean;\n}\n\ninterface ZoomMeetingProps {\n  onJoinMeeting?: (roomId: string) => void;\n}\n\nexport default function ZoomMeeting({ onJoinMeeting }: ZoomMeetingProps) {\n  const [showCreateRoom, setShowCreateRoom] = useState(false);\n  const [simulateVideoCall, setSimulateVideoCall] = useState(false);\n  const [isVideoOn, setIsVideoOn] = useState(true);\n  const [isAudioOn, setIsAudioOn] = useState(true);\n  const [currentRoom, setCurrentRoom] = useState<MeetingRoom | null>(null);\n  const [roomForm, setRoomForm] = useState({\n    name: \"\",\n    description: \"\",\n    scheduled_time: \"\",\n    max_participants: 10\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch meeting rooms\n  const { data: meetingRooms, isLoading } = useQuery({\n    queryKey: ['/api/meeting-rooms']\n  });\n\n  // Create meeting room mutation\n  const createRoomMutation = useMutation({\n    mutationFn: async (roomData: any) => {\n      await apiRequest('POST', '/api/meeting-rooms', roomData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/meeting-rooms'] });\n      toast({\n        title: \"Meeting Room Created\",\n        description: \"Your video meeting room is ready!\",\n      });\n      setShowCreateRoom(false);\n      setRoomForm({\n        name: \"\",\n        description: \"\",\n        scheduled_time: \"\",\n        max_participants: 10\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Join meeting mutation\n  const joinMeetingMutation = useMutation({\n    mutationFn: async (roomId: string) => {\n      const response = await apiRequest('POST', `/api/meeting-rooms/${roomId}/join`, {});\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setCurrentRoom(data.room);\n      // For demo purposes, we'll simulate joining the meeting\n      setSimulateVideoCall(true);\n      toast({\n        title: \"Joining Meeting\",\n        description: `Connecting to ${data.room.name}...`,\n      });\n      \n      // In real implementation, this would integrate with Zoom SDK\n      // For now, we'll just open the Zoom URL in a new tab\n      if (data.zoom_join_url && data.zoom_join_url.includes('zoom.us')) {\n        setTimeout(() => {\n          window.open(data.zoom_join_url, '_blank');\n        }, 1000);\n      }\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateRoom = () => {\n    if (!roomForm.name) {\n      toast({\n        title: \"Error\",\n        description: \"Room name is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createRoomMutation.mutate(roomForm);\n  };\n\n  const handleJoinMeeting = (room: MeetingRoom) => {\n    joinMeetingMutation.mutate(room.id);\n    if (onJoinMeeting) {\n      onJoinMeeting(room.id);\n    }\n  };\n\n  const formatDateTime = (dateString: string | null) => {\n    if (!dateString) return 'Instant Meeting';\n    return new Date(dateString).toLocaleString();\n  };\n\n  const MockVideoCall = () => (\n    <div className=\"fixed inset-0 bg-black z-50 flex flex-col\">\n      {/* Video Call Header */}\n      <div className=\"bg-gray-900 p-4 flex justify-between items-center\">\n        <div className=\"text-white\">\n          <h3 className=\"font-bold\">{currentRoom?.name}</h3>\n          <p className=\"text-sm text-gray-300\">Meeting ID: {currentRoom?.zoom_meeting_id}</p>\n        </div>\n        <Button\n          variant=\"destructive\"\n          onClick={() => {\n            setSimulateVideoCall(false);\n            setCurrentRoom(null);\n          }}\n          data-testid=\"button-leave-meeting\"\n        >\n          Leave Meeting\n        </Button>\n      </div>\n\n      {/* Video Area */}\n      <div className=\"flex-1 bg-gray-800 flex items-center justify-center relative\">\n        <div className=\"grid grid-cols-2 gap-4 max-w-4xl w-full p-8\">\n          {/* Local Video */}\n          <div className=\"aspect-video bg-gray-700 rounded-lg flex items-center justify-center relative\">\n            {isVideoOn ? (\n              <div className=\"text-white text-center\">\n                <Video className=\"w-16 h-16 mx-auto mb-2\" />\n                <p>Your Video</p>\n              </div>\n            ) : (\n              <div className=\"text-white text-center\">\n                <VideoOff className=\"w-16 h-16 mx-auto mb-2\" />\n                <p>Video Off</p>\n              </div>\n            )}\n            <div className=\"absolute bottom-2 left-2 bg-black bg-opacity-50 text-white px-2 py-1 rounded text-sm\">\n              You\n            </div>\n          </div>\n\n          {/* Remote Video */}\n          <div className=\"aspect-video bg-gray-700 rounded-lg flex items-center justify-center relative\">\n            <div className=\"text-white text-center\">\n              <Users className=\"w-16 h-16 mx-auto mb-2\" />\n              <p>Waiting for others...</p>\n            </div>\n            <div className=\"absolute bottom-2 left-2 bg-black bg-opacity-50 text-white px-2 py-1 rounded text-sm\">\n              Other Participants\n            </div>\n          </div>\n        </div>\n\n        {/* Floating Controls */}\n        <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2\">\n          <div className=\"flex space-x-4 bg-gray-900 bg-opacity-80 p-4 rounded-lg\">\n            <Button\n              variant={isAudioOn ? \"default\" : \"destructive\"}\n              size=\"sm\"\n              onClick={() => setIsAudioOn(!isAudioOn)}\n              data-testid=\"button-toggle-audio\"\n            >\n              {isAudioOn ? <Mic className=\"w-4 h-4\" /> : <MicOff className=\"w-4 h-4\" />}\n            </Button>\n            <Button\n              variant={isVideoOn ? \"default\" : \"destructive\"}\n              size=\"sm\"\n              onClick={() => setIsVideoOn(!isVideoOn)}\n              data-testid=\"button-toggle-video\"\n            >\n              {isVideoOn ? <Video className=\"w-4 h-4\" /> : <VideoOff className=\"w-4 h-4\" />}\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" data-testid=\"button-share-screen\">\n              <Monitor className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  if (simulateVideoCall) {\n    return <MockVideoCall />;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-arcade text-primary\">Video Meeting Rooms</h2>\n          <p className=\"text-muted-foreground\">Connect face-to-face with learning partners</p>\n        </div>\n        <Dialog open={showCreateRoom} onOpenChange={setShowCreateRoom}>\n          <DialogTrigger asChild>\n            <Button className=\"arcade-button\" data-testid=\"button-create-room\">\n              <Video className=\"w-4 h-4 mr-2\" />\n              Create Room\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Create Video Meeting Room</DialogTitle>\n              <DialogDescription>\n                Set up a new video call room for mentoring or collaboration.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"room-name\">Room Name</Label>\n                <Input\n                  id=\"room-name\"\n                  placeholder=\"e.g., Python Coding Session\"\n                  value={roomForm.name}\n                  onChange={(e) => setRoomForm({...roomForm, name: e.target.value})}\n                  data-testid=\"input-room-name\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"room-description\">Description</Label>\n                <Textarea\n                  id=\"room-description\"\n                  placeholder=\"What will you discuss in this meeting?\"\n                  value={roomForm.description}\n                  onChange={(e) => setRoomForm({...roomForm, description: e.target.value})}\n                  rows={3}\n                  data-testid=\"textarea-room-description\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"scheduled-time\">Scheduled Time (Optional)</Label>\n                <Input\n                  id=\"scheduled-time\"\n                  type=\"datetime-local\"\n                  value={roomForm.scheduled_time}\n                  onChange={(e) => setRoomForm({...roomForm, scheduled_time: e.target.value})}\n                  data-testid=\"input-scheduled-time\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"max-participants\">Max Participants</Label>\n                <Input\n                  id=\"max-participants\"\n                  type=\"number\"\n                  min=\"2\"\n                  max=\"50\"\n                  value={roomForm.max_participants}\n                  onChange={(e) => setRoomForm({...roomForm, max_participants: parseInt(e.target.value) || 10})}\n                  data-testid=\"input-max-participants\"\n                />\n              </div>\n              <Button\n                onClick={handleCreateRoom}\n                disabled={createRoomMutation.isPending}\n                className=\"w-full\"\n                data-testid=\"button-save-room\"\n              >\n                Create Meeting Room\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Meeting Rooms List */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {isLoading ? (\n          <div className=\"col-span-full text-center py-8\">\n            <div className=\"text-muted-foreground\">Loading meeting rooms...</div>\n          </div>\n        ) : (\n          meetingRooms?.map((room: MeetingRoom) => (\n            <Card key={room.id} className=\"arcade-card border-arcade-blue\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span className=\"truncate\">{room.name}</span>\n                  {room.is_active && (\n                    <Badge variant=\"default\" className=\"text-xs\">\n                      Active\n                    </Badge>\n                  )}\n                </CardTitle>\n                <CardDescription>\n                  Created by {room.creator?.username}\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {room.description && (\n                  <p className=\"text-sm text-muted-foreground\">{room.description}</p>\n                )}\n                \n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex items-center gap-2\">\n                    <Calendar className=\"w-4 h-4\" />\n                    <span>{formatDateTime(room.scheduled_time)}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Users className=\"w-4 h-4\" />\n                    <span>Max {room.max_participants} participants</span>\n                  </div>\n                </div>\n\n                <div className=\"flex gap-2\">\n                  <Button\n                    onClick={() => handleJoinMeeting(room)}\n                    disabled={!room.is_active || joinMeetingMutation.isPending}\n                    className=\"flex-1\"\n                    data-testid={`button-join-room-${room.id}`}\n                  >\n                    <Video className=\"w-4 h-4 mr-2\" />\n                    Join Meeting\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => window.open(room.zoom_join_url, '_blank')}\n                    data-testid={`button-external-join-${room.id}`}\n                  >\n                    <ExternalLink className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n\n      {(!meetingRooms || meetingRooms.length === 0) && !isLoading && (\n        <div className=\"text-center py-12\">\n          <Video className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground opacity-50\" />\n          <h3 className=\"text-lg font-medium mb-2\">No Meeting Rooms</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            Create your first video meeting room to start connecting with others!\n          </p>\n          <Button onClick={() => setShowCreateRoom(true)} data-testid=\"button-create-first-room\">\n            Create Your First Room\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":13771},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\n// Toggle this to true for verbose logging\nconst DEBUG = false;\n\nfunction log(...args: any[]) {\n  if (DEBUG) console.log(\"[queryClient]\", ...args);\n}\n\nasync function throwIfResNotOk(res: Response): Promise<void> {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest<T = any>(\n  method: string,\n  url: string,\n  data?: unknown,\n): Promise<T> {\n  const baseUrl = (import.meta.env.VITE_API_URL || \"http://localhost:5001\").replace(/\\/+$/, \"\");\n  const fullUrl = url.startsWith(\"/\") ? `${baseUrl}${url}` : `${baseUrl}/${url}`;\n\n  log(\"API Request:\", method, fullUrl, data);\n\n  const res = await fetch(fullUrl, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return await res.json();\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\n\nexport const getQueryFn =\n  <T>(options: { on401: UnauthorizedBehavior }): QueryFunction<T> =>\n  async ({ queryKey }) => {\n    const baseUrl = (import.meta.env.VITE_API_URL || \"http://localhost:5001\").replace(/\\/+$/, \"\");\n\n    // Sanitize queryKey and join safely\n    const path = Array.isArray(queryKey)\n      ? queryKey\n          .filter(Boolean)\n          .map((segment) => String(segment).replace(/^\\/+/, \"\").replace(/\\/+$/, \"\"))\n          .join(\"/\")\n      : String(queryKey);\n\n    const fullUrl = new URL(path, baseUrl).toString();\n    log(\"Query Fetch:\", fullUrl);\n\n    const res = await fetch(fullUrl, {\n      credentials: \"include\",\n    });\n\n    if (options.on401 === \"returnNull\" && res.status === 401) {\n      log(\"401 Unauthorized — returning null\");\n      return null as unknown as T;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n\n// Zoom Meeting Sync Helper\nexport async function syncZoomMeetings(): Promise<{ synced: any[] }> {\n  log(\"Syncing Zoom meetings...\");\n  return await apiRequest<{ synced: any[] }>(\"POST\", \"/api/sync-zoom\");\n}\n","size_bytes":2440},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/chat.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Send, Users, Coffee, Target, Video } from \"lucide-react\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport ZoomMeeting from \"@/components/zoom-meeting\";\n\ninterface Message {\n  id: string;\n  user: string;\n  message: string;\n  timestamp: Date;\n  room: string;\n}\n\nexport default function Chat() {\n  const [activeRoom, setActiveRoom] = useState(\"coffee\");\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: \"1\",\n      user: \"Mary_68\",\n      message: \"Good morning everyone! Beautiful day today 🌞\",\n      timestamp: new Date(Date.now() - 300000),\n      room: \"coffee\"\n    },\n    {\n      id: \"2\", \n      user: \"Jordan_16\",\n      message: \"Hey Mary! Hope you're doing well. Any weekend plans?\",\n      timestamp: new Date(Date.now() - 240000),\n      room: \"coffee\"\n    },\n    {\n      id: \"3\",\n      user: \"TechGuru_55\",\n      message: \"Does anyone know how to set up a smart TV? I'm totally lost!\",\n      timestamp: new Date(Date.now() - 180000),\n      room: \"tech-help\"\n    }\n  ]);\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  const rooms = [\n    { id: \"coffee\", name: \"Coffee Room\", icon: Coffee, color: \"accent\", activeUsers: 12 },\n    { id: \"tech-help\", name: \"Tech Help\", icon: Target, color: \"primary\", activeUsers: 8 },\n    { id: \"creative\", name: \"Creative Arts\", icon: Users, color: \"secondary\", activeUsers: 15 }\n  ];\n\n  const sendMessage = () => {\n    if (newMessage.trim()) {\n      const message: Message = {\n        id: Date.now().toString(),\n        user: \"You\",\n        message: newMessage,\n        timestamp: new Date(),\n        room: activeRoom\n      };\n      setMessages([...messages, message]);\n      setNewMessage(\"\");\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      sendMessage();\n    }\n  };\n\n  const filteredMessages = messages.filter(msg => msg.room === activeRoom);\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <Navigation />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"font-arcade text-primary text-3xl md:text-5xl mb-4\">CONNECT & CHAT</h1>\n          <p className=\"text-xl text-muted-foreground\">Text chat and video meetings in one place</p>\n        </div>\n\n        <Tabs defaultValue=\"chat\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2 mb-8\">\n            <TabsTrigger value=\"chat\" className=\"arcade-button\" data-testid=\"tab-chat\">\n              <Coffee className=\"w-4 h-4 mr-2\" />\n              Text Chat\n            </TabsTrigger>\n            <TabsTrigger value=\"video\" className=\"arcade-button\" data-testid=\"tab-video\">\n              <Video className=\"w-4 h-4 mr-2\" />\n              Video Meetings\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"chat\">\n            <div className=\"grid lg:grid-cols-4 gap-6\">\n          {/* Room List */}\n          <div className=\"lg:col-span-1\">\n            <h2 className=\"font-arcade text-secondary text-lg mb-4\">ROOMS</h2>\n            <div className=\"space-y-3\">\n              {rooms.map((room) => {\n                const IconComponent = room.icon;\n                return (\n                  <button\n                    key={room.id}\n                    onClick={() => setActiveRoom(room.id)}\n                    className={`w-full p-4 rounded-lg border-2 text-left transition-all arcade-button ${\n                      activeRoom === room.id \n                        ? `border-${room.color} bg-${room.color} text-${room.color}-foreground` \n                        : 'border-border bg-card hover:border-primary'\n                    }`}\n                    data-testid={`button-room-${room.id}`}\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <IconComponent className=\"w-5 h-5\" />\n                      <div>\n                        <div className=\"font-medium\">{room.name}</div>\n                        <div className=\"text-sm opacity-75\">{room.activeUsers} active</div>\n                      </div>\n                    </div>\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Chat Area */}\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-card rounded-lg border h-96 flex flex-col\">\n              {/* Chat Header */}\n              <div className=\"border-b p-4\">\n                <h3 className=\"font-arcade text-primary text-sm\">\n                  {rooms.find(r => r.id === activeRoom)?.name.toUpperCase()}\n                </h3>\n              </div>\n\n              {/* Messages */}\n              <div className=\"flex-1 p-4 overflow-y-auto space-y-3\" data-testid=\"chat-messages\">\n                {filteredMessages.map((msg) => (\n                  <div key={msg.id} className=\"flex space-x-3\">\n                    <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center text-xs font-bold\">\n                      {msg.user[0]}\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-1\">\n                        <span className=\"font-medium text-sm\">{msg.user}</span>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {msg.timestamp.toLocaleTimeString()}\n                        </span>\n                      </div>\n                      <p className=\"text-foreground\">{msg.message}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              {/* Message Input */}\n              <div className=\"border-t p-4 flex space-x-3\">\n                <Input\n                  value={newMessage}\n                  onChange={(e) => setNewMessage(e.target.value)}\n                  onKeyPress={handleKeyPress}\n                  placeholder=\"Type your message...\"\n                  className=\"flex-1\"\n                  data-testid=\"input-message\"\n                />\n                <Button\n                  onClick={sendMessage}\n                  className=\"arcade-button bg-primary text-primary-foreground\"\n                  data-testid=\"button-send-message\"\n                >\n                  <Send className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n          </TabsContent>\n\n          <TabsContent value=\"video\">\n            <ZoomMeeting />\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":6871},"client/src/pages/features.tsx":{"content":"import Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport FeaturesSection from \"@/components/features-section\";\n\nexport default function Features() {\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <Navigation />\n      <div className=\"pt-16\">\n        <FeaturesSection />\n      </div>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":394},"client/src/pages/gamification.tsx":{"content":"import React, { useEffect, useState } from \"react\";\nimport { io, Socket } from \"socket.io-client\";\nimport { motion } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport type UserProfile = {\n  id: string;\n  username: string;\n  level: number;\n  xp: number;\n  streak: number;\n  badges: string[];\n  skills: string[];\n};\n\nexport type LeaderboardEntry = {\n  userId: string;\n  username: string;\n  score: number;\n  level: number;\n};\n\nconst SOCKET_URL = import.meta.env.VITE_GAMIFY_SOCKET ?? \"http://localhost:5000\";\nconst USE_MOCK = true; // Force mock mode for demo purposes\n\nfunction xpNeededForLevel(level: number) {\n  return Math.floor(500 * Math.pow(1.25, level - 1));\n}\n\nfunction applyDailyBonus(user: UserProfile) {\n  const bonus = 50 * user.streak;\n  return { ...user, xp: user.xp + bonus };\n}\n\nexport function useGamification(userId: string) {\n  const [socket, setSocket] = useState<Socket | null>(null);\n  const [profile, setProfile] = useState<UserProfile | null>(null);\n  const [leaderboard, setLeaderboard] = useState<LeaderboardEntry[]>([]);\n  const [notifications, setNotifications] = useState<string[]>([]);\n  const [cooldown, setCooldown] = useState(false);\n\n  useEffect(() => {\n    if (USE_MOCK) {\n      setProfile({\n        id: userId,\n        username: \"DemoUser\",\n        level: 1,\n        xp: 0,\n        streak: 1,\n        badges: [],\n        skills: [\"Math\", \"Science\"],\n      });\n      setLeaderboard([]);\n      return;\n    }\n\n    const s = io(SOCKET_URL, { transports: [\"websocket\"] });\n    setSocket(s);\n\n    s.on(\"profileUpdate\", (data: UserProfile) => setProfile(data));\n    s.on(\"leaderboardUpdate\", (lb: LeaderboardEntry[]) => setLeaderboard(lb));\n    s.on(\"notification\", (msg: string) => pushNotif(msg));\n\n    s.emit(\"getProfile\", userId);\n\n    return () => {\n      s.disconnect();\n    };\n  }, [userId]);\n\n  function pushNotif(msg: string) {\n    setNotifications((prev) => [msg, ...prev].slice(0, 5));\n  }\n\n  function earnPoints(amount: number) {\n    if (cooldown) {\n      pushNotif(\"⏳ Please wait before earning again!\");\n      return;\n    }\n    setCooldown(true);\n    setTimeout(() => setCooldown(false), 3000);\n\n    if (USE_MOCK) {\n      if (!profile) return;\n      const updated = { ...profile, xp: profile.xp + amount };\n      const xpThreshold = xpNeededForLevel(updated.level);\n      if (updated.xp >= xpThreshold) {\n        updated.level++;\n        updated.xp -= xpThreshold;\n        updated.badges.push(`Level ${updated.level} Unlocked`);\n        pushNotif(`🎉 You leveled up to ${updated.level}!`);\n      }\n      setProfile(updated);\n      return;\n    }\n\n    if (socket) socket.emit(\"earnPoints\", { userId, amount });\n  }\n\n  function claimDailyBonus() {\n    if (!profile) return;\n    if (USE_MOCK) {\n      const updated = applyDailyBonus(profile);\n      pushNotif(`🔥 Daily streak bonus applied! (+${50 * profile.streak})`);\n      setProfile(updated);\n      return;\n    }\n    if (socket) socket.emit(\"claimDaily\", { userId });\n  }\n\n  return { profile, leaderboard, notifications, earnPoints, claimDailyBonus, cooldown };\n}\n\nexport function GamificationTab({ userId }: { userId: string }) {\n  const { profile, leaderboard, notifications, earnPoints, claimDailyBonus, cooldown } =\n    useGamification(userId);\n\n  if (!profile) return <div className=\"text-center py-20\">Loading profile...</div>;\n\n  const xpNeeded = xpNeededForLevel(profile.level);\n  const progress = Math.min((profile.xp / xpNeeded) * 100, 100);\n\n  return (\n    <section id=\"gamify\" className=\"py-20 bg-background font-arcade\">\n      <div className=\"max-w-6xl mx-auto px-6\">\n        <h2 className=\"text-3xl text-primary text-center mb-6 neon-glow\">🏆 Gamification</h2>\n\n        {/* XP + LEVEL */}\n        <div className=\"bg-card p-6 rounded-lg shadow-md mb-6 text-center pulse-border\">\n          <h3 className=\"text-xl mb-2 rainbow-text\">Level {profile.level}</h3>\n          <motion.div\n            initial={{ width: 0 }}\n            animate={{ width: `${progress}%` }}\n            transition={{ duration: 0.8 }}\n            className=\"h-4 color-shift-bg rounded-full\"\n          />\n          <p className=\"text-sm mt-2\">\n            {profile.xp} / {xpNeeded} XP ({progress.toFixed(1)}%)\n          </p>\n        </div>\n\n        {/* Buttons */}\n        <div className=\"flex gap-4 justify-center mb-6\">\n          <Button\n            onClick={() => earnPoints(120)}\n            className=\"bg-primary px-6\"\n            disabled={cooldown}\n            data-testid=\"button-earn-points\"\n          >\n            {cooldown ? \"Cooldown...\" : \"Earn Points\"}\n          </Button>\n          <Button onClick={claimDailyBonus} className=\"bg-accent px-6\" data-testid=\"button-daily-bonus\">\n            Claim Daily Bonus\n          </Button>\n        </div>\n\n        {/* Streaks & Badges */}\n        <div className=\"grid grid-cols-2 gap-4 mb-6\">\n          <div className=\"bg-card p-4 rounded\">\n            <h4 className=\"text-lg mb-2\">🔥 Streak</h4>\n            <p data-testid=\"text-streak-days\">{profile.streak} days</p>\n            <p className=\"text-xs text-muted-foreground\">\n              Bonus: +{50 * profile.streak} XP\n            </p>\n          </div>\n          <div className=\"bg-card p-4 rounded\">\n            <h4 className=\"text-lg mb-2\">🎖️ Badges</h4>\n            <ul className=\"text-sm list-disc pl-4\" data-testid=\"list-badges\">\n              {profile.badges.length ? (\n                profile.badges.map((b, i) => <li key={i}>{b}</li>)\n              ) : (\n                <li>No badges yet</li>\n              )}\n            </ul>\n          </div>\n        </div>\n\n        {/* Leaderboard */}\n        <div className=\"bg-card p-6 rounded\">\n          <h4 className=\"text-lg mb-3\">Leaderboard</h4>\n          {leaderboard.length === 0 ? (\n            <p className=\"text-sm text-muted-foreground\">No leaderboard data yet</p>\n          ) : (\n            <ul data-testid=\"list-leaderboard\">\n              {leaderboard.map((entry, i) => (\n                <li\n                  key={entry.userId}\n                  className={`flex justify-between ${\n                    entry.userId === profile.id ? \"bg-primary/20 font-bold\" : \"\"\n                  } p-2 rounded`}\n                  data-testid={`item-leaderboard-${entry.userId}`}\n                >\n                  <span>\n                    {i === 0 ? \"🥇\" : i === 1 ? \"🥈\" : i === 2 ? \"🥉\" : `#${i + 1}`} {entry.username}\n                  </span>\n                  <span>Lv {entry.level} ({entry.score} pts)</span>\n                </li>\n              ))}\n            </ul>\n          )}\n        </div>\n\n        {/* Notifications */}\n        <div className=\"mt-6\">\n          <h4 className=\"text-lg mb-2\">Notifications</h4>\n          <ul className=\"text-sm text-muted-foreground\" data-testid=\"list-notifications\">\n            {notifications.length ? (\n              notifications.map((n, i) => <li key={i}>• {n}</li>)\n            ) : (\n              <li>No recent activity</li>\n            )}\n          </ul>\n        </div>\n      </div>\n    </section>\n  );\n}\n\n// Type for the API response from /api/auth/me\ntype AuthUser = { \n  id: string; \n  username: string; \n  email: string; \n  first_name: string; \n  last_name: string; \n  age: number; \n  bio: string; \n  profile_image_url: string; \n  points: number; \n  level: number; \n};\n\n// Main page component that fetches user and passes to GamificationTab\nexport default function Gamification() {\n  const { data: auth, isLoading: loadingAuth } = useQuery<AuthUser>({\n    queryKey: [\"/api/auth/me\"],\n  });\n\n  // Provide fallback user ID if auth fails\n  const userId = auth?.id || \"demo-user\";\n\n  if (loadingAuth) {\n    return <div className=\"text-center py-20\">Loading...</div>;\n  }\n\n  return <GamificationTab userId={userId} />;\n}\n","size_bytes":7808},"client/src/pages/home.tsx":{"content":"import Navigation from \"@/components/navigation\";\nimport HeroSection from \"@/components/hero-section\";\nimport WhatsNewSection from \"@/components/whats-new-section\";\nimport FeaturesSection from \"@/components/features-section\";\nimport ChatSection from \"@/components/chat-section\";\nimport ResourcesSection from \"@/components/resources-section\";\nimport ProfileSection from \"@/components/profile-section\";\nimport MatchMeSection from \"@/components/match-me-section\";\nimport DownloadSection from \"@/components/download-section\";\nimport FollowUsSection from \"@/components/follow-us-section\";\nimport GetStartedSection from \"@/components/get-started-section\";\nimport Footer from \"@/components/footer\";\nimport { useQuery } from \"@tanstack/react-query\";\n\n// Type for the API response from /api/auth/me\ntype AuthUser = { \n  id: string; \n  username: string; \n  email: string; \n  first_name: string; \n  last_name: string; \n  age: number; \n  bio: string; \n  profile_image_url: string; \n  points: number; \n  level: number; \n};\n\nexport default function Home() {\n  // Get current user for MatchMeSection\n  const { data: auth } = useQuery<AuthUser>({\n    queryKey: [\"/api/auth/me\"],\n  });\n\n  // Map AuthUser to UserProfile format expected by MatchMeSection\n  const currentUser = auth ? {\n    id: auth.id,\n    username: auth.username,\n    skills: [\"Teaching\", \"Technology\", \"Communication\"],\n    availability: [\"Weekends\", \"Evenings\"],\n    metadata: { points: auth.points, level: auth.level }\n  } : {\n    id: \"demo-user\",\n    username: \"DemoUser\",\n    skills: [\"Teaching\", \"Technology\", \"Communication\"],\n    availability: [\"Weekends\", \"Evenings\"],\n    metadata: {}\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground font-sans\">\n      <Navigation />\n      <HeroSection />\n      <WhatsNewSection />\n      <FeaturesSection />\n      <ChatSection />\n      <ResourcesSection />\n      <ProfileSection />\n      <MatchMeSection currentUser={currentUser} />\n      <DownloadSection />\n      <FollowUsSection />\n      <GetStartedSection />\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":2072},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/zoom.role.tracker/app/__init__.py":{"content":"","size_bytes":0},"client/zoom.role.tracker/app/backhend.py":{"content":"from threading import Lock\nfrom typing import Dict, List\n\nTRACKED_ROLES = [\"person\", \"teacher\", \"is_youth\", \"tutor\"]\n\nclass ZoomCallTracker:\n    def __init__(self, num_calls: int = 3):\n        self.num_calls = num_calls\n        self.calls: List[Dict[str, int]] = [\n            {role: 0 for role in TRACKED_ROLES} for _ in range(num_calls)\n        ]\n        self.meeting_to_index: Dict[str, int] = {}\n        self._lock = Lock()\n\n    def reset(self, call_index: int = None):\n        with self._lock:\n            if call_index is None:\n                for i in range(self.num_calls):\n                    for role in TRACKED_ROLES:\n                        self.calls[i][role] = 0\n            else:\n                for role in TRACKED_ROLES:\n                    self.calls[call_index][role] = 0\n\n    def set_mapping(self, meeting_id: str, index: int):\n        if not (0 <= index < self.num_calls):\n            raise ValueError(\"index out of range\")\n        with self._lock:\n            self.meeting_to_index[meeting_id] = index\n\n    def get_index_for_meeting(self, meeting_id: str) -> int:\n        with self._lock:\n            return self.meeting_to_index.get(meeting_id, None)\n\n    def increment_roles(self, call_index: int, roles: List[str]):\n        with self._lock:\n            for r in roles:\n                if r in TRACKED_ROLES:\n                    self.calls[call_index][r] += 1\n\n    def get_calls(self) -> List[Dict[str, int]]:\n        with self._lock:\n            return [dict(c) for c in self.calls]\n\n# Global singleton\ntracker = ZoomCallTracker()","size_bytes":1555},"client/zoom.role.tracker/app/bad_words.py":{"content":"from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\nBAD_WORDS = {'1 man 1 jar', '1m1j', '1man1jar', '2 girls 1 cup', '2g1c', '2girls1cup', 'acrotomophile', 'acrotomophilia', 'alabama hot pocket', 'alabama tuna melt', 'alaskan pipeline', 'algophile', 'algophilia', 'anal', 'anal assassin', 'anal astronaut', 'anilingus', 'anus', 'ape shit', 'ape-shit', 'apeshit', 'apotemnophile', 'apotemnophilia', 'arse', 'arse bandit', 'arsehole', 'ass', 'ass bandit', 'asshole', 'auto erotic', 'autoerotic', 'babeland', 'baby batter', 'baby gravy', 'baby juice', 'ball batter', 'ball gag', 'ball gravy', 'ball kicking', 'ball licking', 'ball sack', 'ball sucking', 'ball-gag', 'ball-kicking', 'ball-licking', 'ball-sucking', 'ballcuzi', 'ballgag', 'bang bros', 'bang bus', 'bangbros', 'bangbus', 'bareback', 'barely legal', 'bastard', 'bastinado', 'batty boi', 'batty boy', 'battyboi', 'battyboy', 'bdsm', 'bean flicker', 'bean queen', 'bean-flicker', 'beaner', 'beaners', 'beanflicker', 'beastiality', 'beaver cleaver', 'beaver lips', 'beestiality', 'bellend', 'bellesa', 'bestiality', 'bicon', 'big boobs', 'big breasts', 'big cock', 'big knockers', 'big tits', 'birdlock', 'bitch', 'bitches', 'black cock', 'bloody', 'blow job', 'blow your load', 'blow-job', 'blowjob', 'blue waffle', 'bluewaffle', 'blumpkin', 'bollocks', 'bone smuggler', 'bone-smuggler', 'boner', 'bonesmuggler', 'boob', 'booty buffer', 'booty call', 'booty-buffer', 'boston george', 'breasts', 'brown piper', 'brown shower', 'brown showers', 'brown-piper', 'brownie king', 'brownie queen', 'brownpiper', 'buddha head', 'buddha-head', 'buddhahead', 'bufter', 'bufty', 'bugger', 'bukkake', 'bull shit', 'bull-shit', 'bulldyke', 'bullet vibe', 'bullet vibrator', 'bullshit', 'bum boy', 'bum chum', 'bum driller', 'bum pilot', 'bum pirate', 'bum rider', 'bum robber', 'bum rustler', 'bum-boy', 'bum-chum', 'bum-driller', 'bum-pirate', 'bum-robber', 'bumboy', 'bumchum', 'bumdriller', 'bumhole engineer', 'bumrider', 'bumrobber', 'butt boy', 'butt pilot', 'butt pirate', 'butt rider', 'butt robber', 'butt rustler', 'butt-boy', 'butt-pirate', 'butt-robber', 'buttboy', 'butthole engineer', 'buttrider', 'buttrobber', 'camel jockey', 'camel jockies', 'camel toe', 'cameljockey', 'cameljockies', 'canadian porch swing', 'carpet muncher', 'carpetmuncher', 'cheese eating surrender monkey', 'cheese-eating surrender monkey', 'chi chi man', 'chi-chi man', 'chicken queen', 'china man', 'china men', 'chinaman', 'chinamen', 'ching chong', 'ching-chong', 'chink', 'chinks', 'chinky', 'chocolate rosebud', 'chocolate rosebuds', 'cholerophile', 'cholerophilia', 'christ', 'cialis', 'circle-jerk', 'circlejerk', 'cishet', 'cissie', 'cissy', 'claustrophile', 'claustrophilia', 'cleveland accordion', 'cleveland hot waffle', 'cleveland steamer', 'clit', 'clitoris', 'clover clamp', 'clover clamps', 'clunge', 'cluster fuck', 'cluster-fuck', 'clusterfuck', 'cock', 'cockpipe cosmonaut', 'cockstruction worker', 'coimetrophile', 'coimetrophilia', 'collared', 'collaring', 'coon', 'coons', 'coprolagnia', 'coprophile', 'coprophilia', 'cornhole', 'crafty butcher', 'cream-pie', 'creampie', 'cum', 'cum shot', 'cum shots', 'cumming', 'cumshot', 'cumshots', 'cunnilingus', 'cunt', 'cunt boy', 'cunt-boy', 'cuntboy', 'cunts', 'curry muncher', 'curry-muncher', 'currymuncher', 'damn', 'darkey', 'darkie', 'darkies', 'darky', 'date rape', 'daterape', 'ddlg', 'deep throat', 'deep-throat', 'deepthroat', 'dendrophile', 'dendrophilia', 'dick', 'dick girl', 'dick-girl', 'dickgirl', 'dildo', 'dildos', 'dingleberries', 'dingleberry', 'dipsea', 'dirty pillows', 'dirty sanchez', 'dishabiliophile', 'dishabiliophilia', 'dog shit', 'dog style', 'dog-shit', 'doggie style', 'doggie-style', 'doggiestyle', 'doggy style', 'doggy-style', 'doggystyle', 'dogshit', 'dolcett', 'domination', 'dominatrix', 'domme', 'dommes', 'donkey punch', 'donut muncher', 'donut puncher', 'doon coon', 'dooncoon', 'double penetration', 'dp action', 'dry hump', 'dune coon', 'dune-coon', 'dutch rudder', 'dyke', 'dystychiphile', 'dystychiphilia', 'edge play', 'edgeplay', 'ejaculate', 'ejaculated', 'ejaculating', 'ejaculation', 'electro-play', 'electroplay', 'emetophile', 'emetophilia', 'enby', 'eskimo trebuchet', 'eye-tie', 'eyetie', 'fag', 'fag bomb', 'fag-bomb', 'fagbomb', 'faggot', 'fagot', 'felch', 'felching', 'fellating', 'fellatio', 'female squirting', 'figging', 'finger bang', 'fingerbang', 'fingerbanging', 'fingered', 'fingering', 'finocchio', 'finoccio', 'finochio', 'fisted', 'fisting', 'foot job', 'foot-job', 'footjob', 'french rudder', 'frog eater', 'frog-eater', 'frogeater', 'frolic me', 'frolicme', 'frottage', 'frotting', 'fuck', 'fuck-wit', 'fucken', 'fucker', 'fuckers', 'fuckhead', 'fuckheads', 'fuckin', 'fucking', 'fucks', 'fucktard', 'fucktards', 'fuckwad', 'fuckwads', 'fuckwhit', 'fuckwit', 'fuckwits', 'fudge packer', 'fudge-packer', 'fudgepacker', 'futanari', 'g-spot', 'gang bang', 'gangbang', 'gay sex', 'gaysian', 'genitals', 'genitorture', 'gerontophile', 'gerontophilia', 'giant cock', 'gin jockey', 'gin jocky', 'girl on top', 'go-kun', 'goatcx', 'goatse', 'god damn', 'god damned', 'god-damn', 'god-damned', 'goddamn', 'goddamned', 'gokkun', 'golden shower', 'golden showers', 'golliwog', 'gollywog', 'gook', 'gook-eye', 'gookie', 'gooks', 'gooky', 'goregasm', 'gray queen', 'greaseball', 'grey queen', 'grope', 'group sex', 'gym bunny', 'gymbunny', 'hadji', 'haji', 'hajji', 'hand job', 'hand-job', 'handjob', 'heimie', 'hell', 'hermie', 'hickory switch', 'hippophile', 'hippophilia', 'homoerotic', 'honkey', 'honkeys', 'honkies', 'honky', 'horny', 'horse shit', 'horse-shit', 'horseshit', 'hot carl', 'hot richard', 'huge cock', 'humping', 'hymie', 'impact play', 'impact-play', 'incest', 'intercourse', 'jack off', 'jack-off', 'jail bait', 'jailbait', 'jap', 'jelly donut', 'jerk mate', 'jerk off', 'jerk-off', 'jerkmate', 'jesus', 'jesus christ', 'jigaboo', 'jiggerboo', 'jizz', 'juggs', 'jungle bunny', 'junglebunny', 'kennebunkport surprise', 'kentucky klondike', 'kentucky tractor puller', 'kike', 'kinbaku', 'kitty puncher', 'kitty-puncher', 'kittypuncher', 'knobbing', 'kraut', 'krauts', 'kunt', 'kunts', 'kynophile', 'kynophilia', 'lady boy', 'lady-boy', 'ladyboy', 'leather restraint', 'leather straight jacket', 'lemon party', 'lemonparty', 'leningrad steamer', 'lesbo', 'leso', 'lezzie', 'lezzies', 'light in the fedora', 'light in the loafers', 'light in the pants', 'limp wristed', 'limp-wristed', 'literotica', 'lovemaking', 'male squirting', 'male-squirting', 'massive cock', 'masterb8', 'masterbate', 'masturb8', 'masturbate', 'masturbating', 'masturbation', 'mayonnaise monkey', 'mayonnaise monkies', 'mdlb', 'meat masseuse', 'meat spin', 'meatspin', 'menage a trois', 'menage-a-trois', 'menages a trois', 'menages-a-trois', 'menophile', 'menophilia', 'mexican pancake', 'milwaukee blizzard', 'missionary position', 'mississippi birdbath', 'mound of venus', 'mr hands', 'mr. hands', 'mrhands', 'muff diver', 'muff diver', 'muff diving', 'muff-diver', 'muffdiver', 'muffdiver', 'muffdiving', 'muscle mary', 'mvtube', 'nambla', 'necrophile', 'necrophilia', 'negro', 'neo nazi', 'neo-nazi', 'neonazi', 'nig nog', 'nigerian hurricane', 'nigga', 'nigger', 'niggs', 'nignog', 'nimpho', 'nimphomania', 'nimphomaniac', 'nipple', 'nipple clamp', 'nipple clamps', 'nipples', 'nude', 'nudity', 'nutten', 'nympho', 'nymphomania', 'nymphomaniac', 'octopussy', 'oklahomo', 'omorashi', 'one cup two girls', 'one jar one man', 'one man one jar', 'only fans', 'onlyfans', 'orgasm', 'orgasmic', 'orgasms', 'paedo bear', 'paedobear', 'paedophile', 'paedophilia', 'pain slut', 'painslut', 'paki', 'panamanian petting zoo', 'pansy', 'panties', 'parthenophile', 'parthenophilia', 'pedo bear', 'pedobear', 'pedophile', 'pedophilia', 'pegging', 'penis', 'peter puffer', 'peter-puffer', 'peterpuffer', 'petrol sniffer', 'petrol-sniffer', 'petrolsniffer', 'phagophile', 'phagophilia', 'piece of shit', 'pieces of shit', 'pikey', 'pikeys', 'piss off', 'piss pig', 'piss pig', 'pissed off', 'pissing', 'pisspig', 'pisspig', 'playboy', 'pleasure chest', 'pnigerophile', 'pnigerophilia', 'pnigophile', 'pnigophilia', 'poinephile', 'poinephilia', 'pony boy', 'pony girl', 'pony-boy', 'pony-girl', 'pony-play', 'ponyboy', 'ponygirl', 'ponyplay', 'poof', 'poon', 'poontang', 'poop chute', 'poopchute', 'porn', 'porn hub', 'pornhub', 'porno', 'pornographic', 'pornography', 'pornos', 'potato queen', 'prince albert piercing', 'proctophile', 'proctophilia', 'pubes', 'punani', 'punany', 'pussy', 'pussy puncher', 'pussy-puncher', 'pussypuncher', 'queaf', 'queef', 'quim', 'rag head', 'rag heads', 'raghead', 'ragheads', 'raging boner', 'ramen yarmulke', 'rape', 'raping', 'rapist', 'rectum', 'retard', 'retarded', 'reverse cowgirl', 'rhabdophile', 'rhabdophilia', 'rhypophile', 'rhypophilia', 'rice queen', 'rimjob', 'rimming', 'ring raider', 'ringraider', 'rusty trombone', 'sand nigger', 'sand-nigger', 'sandnigger', 'santorum', 'scatophile', 'scatophilia', 'schlong', 'scissoring', 'semen', 'seplophile', 'seplophilia', 'sex', 'shaved beaver', 'shaved pussy', 'she male', 'she-male', 'sheep shagger', 'sheepshagger', 'shemale', 'shibari', 'shit', 'shit head', 'shithead', 'shitty', 'shlong', 'shota', 'shrimping', 'sissy', 'skeet', 'skittle harvest', 'skittles harvest', 'slant eye', 'slant-eye', 'slanteye', 'snatch', 'snowballing', 'sod off', 'sodding', 'sodomise', 'sodomist', 'sodomize', 'sodomy', 'spastic', 'spearchucker', 'spic', 'spick', 'spicks', 'spics', 'spicy gringo', 'splooge', 'splooge moose', 'spooge', 'spunk', 'strap on', 'strap-on', 'strap-on', 'strapon', 'strappado', 'suastika', 'svastika', 'swamp guinea', 'swamp-guinea', 'swastika', 'switch hitter', 't-girl', 'taphephile', 'taphephilia', 'tea bagged', 'tea bagging', 'tea-bagged', 'tea-bagging', 'tgirl', 'thanatophile', 'thanatophilia', 'threesome', 'throating', 'throbbing boner', 'throbbing cock', 'thumbzilla', 'timber nigger', 'timber-nigger', 'timbernigger', 'tits', 'titties', 'titty', 'topless', 'tosser', 'towel head', 'towel-head', 'towelhead', 'trannie', 'tranny', 'transbian', 'traumatophile', 'traumatophilia', 'tribadism', 'tribbing', 'tub girl', 'tubgirl', 'twat', 'twink', 'two girls one cup', 'urethra play', 'urophile', 'urophilia', 'vagina', 'venus mound', 'viagra', 'vibrator', 'violet wand', 'vorarephile', 'vorarephilia', 'voyeurweb', 'wagon burner', 'wagon-burner', 'wank', 'wanker', 'wax play', 'wax-play', 'wet back', 'wet dream', 'wet-back', 'wetback', 'whigger', 'white power', 'white-power', 'whitepower', 'whore', 'wigga', 'wigger', 'wiitwd', 'wog', 'wogs', 'wolfbagging', 'worldsex', 'wrapping men', 'wrinkled starfish', 'xhamster', 'xnxx', 'xtube', 'xvideos', 'xxx', 'xyrophile', 'xyrophilia', 'yellow shower', 'yellow showers', 'zipper head', 'zipper-head', 'zipperhead', 'zippo cat', 'zippo-cat', 'zippocat', 'zoophile', 'zoophilia'}\n\ndef sanitize_message(msg: str) -> str:\n    words = msg.split()\n    return \" \".join([\"*\" * len(w) if w.lower() in BAD_WORDS else w for w in words])\n\ndef contains_bad_words(msg: str) -> bool:\n    return any(w.lower() in BAD_WORDS for w in msg.split())\n\n\n@app.route(\"/chat\", methods=[\"POST\"])\ndef silent_filter():\n    msg = request.json.get(\"message\", \"\").strip()\n    if not msg:\n        return jsonify({\"filtered\": True, \"message\": \"Empty message\"}), 400\n\n    if contains_bad_words(msg):\n        reply = sanitize_message(msg)\n        return jsonify({\"filtered\": True, \"message\": reply}), 200\n\n    return jsonify({\"filtered\": False, \"message\": msg}), 200\n\n\n@app.route(\"/health\")\ndef health():\n    return jsonify({\"status\": \"alive\"}), 200\n\nif __name__ == \"__main__\":\n    app.run(debug=True)","size_bytes":11675},"client/zoom.role.tracker/app/config.py":{"content":"import os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nHOST = os.getenv(\"HOST\", \"127.0.0.1\")\nPORT = int(os.getenv(\"PORT\", \"5055\"))\nDEBUG = os.getenv(\"DEBUG\", \"false\").lower() == \"true\"\nWEBHOOK_SECRET = os.getenv(\"WEBHOOK_SECRET\", \"change-me\")","size_bytes":244},"client/zoom.role.tracker/app/dashboard.py":{"content":"import tkinter as tk\nfrom tkinter import ttk\nfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\nimport matplotlib.pyplot as plt\nimport requests\nimport threading\nimport time\n\nAPI = \"http://127.0.0.1:5055\"\n\ndef fetch_calls():\n    r = requests.get(API + \"/calls\", timeout=5)\n    r.raise_for_status()\n    return r.json()[\"data\"][\"calls\"]\n\nclass Dashboard(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.title(\"Role Distribution Dashboard\")\n        self.geometry(\"800x500\")\n        self._build_plot()\n        self._start_refresh_loop()\n\n    def _build_plot(self):\n        self.fig, self.ax = plt.subplots(figsize=(8, 4))\n        self.canvas = FigureCanvasTkAgg(self.fig, master=self)\n        self.canvas_widget = self.canvas.get_tk_widget()\n        self.canvas_widget.pack(fill=\"both\", expand=True)\n        self.ax.set_title(\"Role Distribution Across Calls\")\n        self.ax.set_ylabel(\"Count\")\n\n    def refresh(self):\n        calls = fetch_calls()\n        roles = [\"person\", \"teacher\", \"is_youth\", \"tutor\"]\n        self.ax.clear()\n        self.ax.set_title(\"Role Distribution Across Calls\")\n        self.ax.set_ylabel(\"Count\")\n        width = 0.2\n        x = range(len(roles))\n        for i, call in enumerate(calls):\n            counts = [call[r] for r in roles]\n            xs = [xi + i * width for xi in x]\n            self.ax.bar(xs, counts, width=width, label=f\"Call {i+1}\")\n        self.ax.set_xticks([xi + width for xi in x])\n        self.ax.set_xticklabels(roles)\n        self.ax.legend()\n        self.canvas.draw()\n\n    def _start_refresh_loop(self):\n        def loop():\n            while True:\n                time.sleep(2)\n                try:\n                    self.refresh()\n                except Exception:\n                    pass\n        threading.Thread(target=loop, daemon=True).start()\n\nif __name__ == \"__main__\":\n    Dashboard().mainloop()","size_bytes":1895},"client/zoom.role.tracker/app/face_detector.py":{"content":"import tkinter as tk\nfrom tkinter import ttk\nfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\nimport matplotlib.pyplot as plt\nimport requests\nimport threading\nimport time\n\nAPI = \"http://127.0.0.1:5055\"\n\ndef fetch_calls():\n    r = requests.get(API + \"/calls\", timeout=5)\n    r.raise_for_status()\n    return r.json()[\"data\"][\"calls\"]\n\nclass Dashboard(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.title(\"Role Distribution Dashboard\")\n        self.geometry(\"800x500\")\n        self._build_plot()\n        self._start_refresh_loop()\n\n    def _build_plot(self):\n        self.fig, self.ax = plt.subplots(figsize=(8, 4))\n        self.canvas = FigureCanvasTkAgg(self.fig, master=self)\n        self.canvas_widget = self.canvas.get_tk_widget()\n        self.canvas_widget.pack(fill=\"both\", expand=True)\n        self.ax.set_title(\"Role Distribution Across Calls\")\n        self.ax.set_ylabel(\"Count\")\n\n    def refresh(self):\n        calls = fetch_calls()\n        roles = [\"person\", \"teacher\", \"is_youth\", \"tutor\"]\n        self.ax.clear()\n        self.ax.set_title(\"Role Distribution Across Calls\")\n        self.ax.set_ylabel(\"Count\")\n        width = 0.2\n        x = range(len(roles))\n        for i, call in enumerate(calls):\n            counts = [call[r] for r in roles]\n            xs = [xi + i * width for xi in x]\n            self.ax.bar(xs, counts, width=width, label=f\"Call {i+1}\")\n        self.ax.set_xticks([xi + width for xi in x])\n        self.ax.set_xticklabels(roles)\n        self.ax.legend()\n        self.canvas.draw()\n\n    def _start_refresh_loop(self):\n        def loop():\n            while True:\n                time.sleep(2)\n                try:\n                    self.refresh()\n                except Exception:\n                    pass\n        threading.Thread(target=loop, daemon=True).start()\n\nif __name__ == \"__main__\":\n    Dashboard().mainloop()","size_bytes":1895},"client/zoom.role.tracker/app/gui.py":{"content":"    import tkinter as tk\n    from tkinter import ttk, messagebox\n    import requests\n    import threading\n    import time\n\n    API = \"http://127.0.0.1:5055\"\n\n    def api_get(path):\n        r = requests.get(API + path, timeout=5)\n        r.raise_for_status()\n        return r.json()[\"data\"]\n\n    def api_post(path, json):\n        r = requests.post(API + path, json=json, timeout=5)\n        r.raise_for_status()\n        return r.json()[\"data\"]\n\n    class App(tk.Tk):\n        def __init__(self):\n            super().__init__()\n            self.title(\"Zoom Role Tracker\")\n            self.geometry(\"520x420\")\n            self.resizable(False, False)\n\n            self.meeting_ids = [\"\", \"\", \"\"]\n            self._build_ui()\n            self._start_refresh_loop()\n\n        def _build_ui(self):\n            title = ttk.Label(self, text=\"Select a call and then map a Meeting ID\", font=(\"Arial\", 15))\n            title.pack(pady=10)\n\n            self.frames = []\n            for i in range(3):\n                f = ttk.Frame(self, padding=10)\n                f.pack(fill=\"x\", pady=5)\n\n                ttk.Label(f, text=f\"Call {i+1}\", width=8).grid(row=0, column=0, sticky=\"w\")\n                ttk.Label(f, text=\"Meeting ID:\").grid(row=0, column=1, sticky=\"e\")\n                eid = ttk.Entry(f, width=24)\n                eid.grid(row=0, column=2, padx=5)\n                map_btn = ttk.Button(f, text=\"Map\", command=lambda idx=i, e=eid: self.map_meeting(idx, e.get()))\n                map_btn.grid(row=0, column=3, padx=5)\n\n                        join_btn = ttk.Button(f, text=\"Simulate Join\", command=lambda idx=i: self.simulate_join(idx))\n                        join_btn.grid(row=0, column=4, padx=5)\n\n                        counts = ttk.Label(f, text=\"person: 0 | teacher: 0 | is_youth: 0 | tutor: 0\")\n                        counts.grid(row=1, column=0, columnspan=5, sticky=\"w\", pady=5)\n\n                        self.frames.append((eid, counts))\n\n                    btns = ttk.Frame(self, padding=10)\n                    btns.pack(fill=\"x\", pady=5)\n                    ttk.Button(btns, text=\"Reset All\", command=self.reset_all).pack(side=\"left\", padx=5)\n                    ttk.Button(btns, text=\"Refresh Now\", command=self.refresh_counts).pack(side=\"left\", padx=5)\n                    ttk.Label(self, text=\"Tip: Run the camera detector to increment roles via webcam.\", foreground=\"#666\").pack(pady=5)\n\n                def map_meeting(self, idx, meeting_id):\n                    if not meeting_id:\n                        messagebox.showerror(\"Error\", \"Enter a Meeting ID first.\")\n                        return\n                    try:\n                        api_post(\"/map-call\", {\"meeting_id\": meeting_id, \"index\": idx})\n                        self.meeting_ids[idx] = meeting_id\n                        messagebox.showinfo(\"Mapped\", f\"Meeting {meeting_id} -> Call {idx+1}\")\n                    except Exception as e:\n                        messagebox.showerror(\"Error\", str(e))\n\n                def simulate_join(self, idx):\n                    # Simulate clicking a “Join Room”: increment a default person role\n                    try:\n                        api_post(\"/increment\", {\"index\": idx, \"roles\": [\"person\"]})\n                        self.refresh_counts()\n                    except Exception as e:\n                        messagebox.showerror(\"Error\", str(e))\n\n                def reset_all(self):\n                    try:\n                        api_post(\"/reset\", {})\n                        self.refresh_counts()\n                    except Exception as e:\n                        messagebox.showerror(\"Error\", str(e))\n\n                def refresh_counts(self):\n                    try:\n                        data = api_get(\"/calls\")\n                        calls = data[\"calls\"]\n                        for i, (_, counts_lbl) in enumerate(self.frames):\n                            c = calls[i]\n                            counts_lbl.config(text=f\"person: {c['person']} | teacher: {c['teacher']} | is_youth: {c['is_youth']} | tutor: {c['tutor']}\")\n                    except Exception as e:\n                        # Silent fail into status bar\n                        print(\"Refresh error:\", e)\n\n                    def _start_refresh_loop(self):\n                    def loop():\n                        while True:\n                            time.sleep(2)\n                            self.refresh_counts()\n                    t = threading.Thread(target=loop, daemon=True)\n                    t.start()\n\n                    if __name__ == \"__main__\":\n                    App().mainloop()","size_bytes":4614},"client/zoom.role.tracker/app/role_classifier.py":{"content":"import random\n\nTRACKED_ROLES = [\"person\", \"teacher\", \"is_youth\", \"tutor\"]\n\ndef classify_faces(face_images):\n    \"\"\"\n    Placeholder role classifier.\n    - Always returns 'person' for each face by default.\n    - You can replace this with your actual model logic.\n    \"\"\"\n    return [\"person\" for _ in face_images]\n\n# Example of a trivial heuristic replacement:\n# def classify_faces(face_images):\n#     roles = []\n#     for i, _img in enumerate(face_images):\n#         roles.append(TRACKED_ROLES[i % len(TRACKED_ROLES)])\n#     return roles","size_bytes":537},"client/zoom.role.tracker/app/routes.py":{"content":"from flask import request\nfrom .bad_words import sanitize_message, contains_bad_words\n\n@api_bp.post(\"/chat\")\ndef chat():\n    data = request.get_json(silent=True) or {}\n    msg = data.get(\"message\", \"\").strip()\n    if not msg:\n        return jsonify({\"ok\": False, \"error\": \"Empty message\"}), 400\n\n    if contains_bad_words(msg):\n        return jsonify({\"ok\": True, \"filtered\": True, \"message\": sanitize_message(msg)}), 200\n    else:\n        return jsonify({\"ok\": True, \"filtered\": False, \"message\": msg}), 200","size_bytes":508},"client/zoom.role.tracker/app/utils.py":{"content":"    from flask import request, jsonify\n    from .config import WEBHOOK_SECRET\n\n    def verify_webhook(req: request) -> bool:\n        \"\"\"\n        Placeholder verifier. In production,\n        use Zoom's recommended verification (e.g., secret token or signature).\n        \"\"\"\n        token = req.headers.get(\"X-Zoom-Token\", \"\")\n        return token == WEBHOOK_SECRET\n\n    def json_ok(payload=None, status=200):\n        return jsonify({\"ok\": True, \"data\": payload}), status\n\n    def json_err(message, status=400):\n        return jsonify({\"ok\": False, \"error\": message}), status","size_bytes":573},"client/zoom.role.tracker/app/zoom_web_tracker.py":{"content":"from flask import Flask, request\nfrom .backend import tracker, TRACKED_ROLES\nfrom .config import HOST, PORT, DEBUG\nfrom .utils import verify_webhook, json_ok, json_err\n\napp = Flask(__name__)\n\n@app.get(\"/health\")\ndef health():\n    return json_ok({\"status\": \"alive\"})\n\n@app.get(\"/calls\")\ndef get_calls():\n    return json_ok({\"calls\": tracker.get_calls()})\n\n@app.post(\"/reset\")\ndef reset():\n    payload = request.get_json(silent=True) or {}\n    idx = payload.get(\"index\")\n    if idx is None:\n        tracker.reset()\n    else:\n        try:\n            tracker.reset(int(idx))\n        except Exception as e:\n            return json_err(str(e), 400)\n    return json_ok({\"message\": \"reset\"})\n\n@app.post(\"/map-call\")\ndef map_call():\n    data = request.get_json(silent=True) or {}\n    meeting_id = data.get(\"meeting_id\")\n    index = data.get(\"index\")\n    if meeting_id is None or index is None:\n        return json_err(\"meeting_id and index required\", 400)\n    try:\n        tracker.set_mapping(str(meeting_id), int(index))\n    except Exception as e:\n        return json_err(str(e), 400)\n    return json_ok({\"message\": \"mapped\", \"meeting_id\": meeting_id, \"index\": index})\n\n@app.post(\"/increment\")\ndef increment():\n    data = request.get_json(silent=True) or {}\n    index = data.get(\"index\")\n    roles = data.get(\"roles\", [])\n    if index is None:\n        return json_err(\"index required\", 400)\n    if not isinstance(roles, list):\n        return json_err(\"roles must be a list\", 400)\n    try:\n        tracker.increment_roles(int(index), roles)\n    except Exception as e:\n        return json_err(str(e), 400)\n    return json_ok({\"message\": \"incremented\", \"index\": index, \"roles\": roles})\n\n@app.post(\"/zoom-webhook\")\ndef zoom_webhook():\n    # Basic verification (placeholder)\n    if not verify_webhook(request):\n        return json_err(\"unauthorized\", 401)\n\n    event = request.json or {}\n    payload = event.get(\"payload\", {})\n    obj = payload.get(\"object\", {})\n\n    meeting_id = str(obj.get(\"id\") or obj.get(\"uuid\") or \"unknown\")\n    call_index = tracker.get_index_for_meeting(meeting_id)\n    if call_index is None:\n        # Fallback: simple deterministic assignment\n        call_index = (abs(hash(meeting_id)) % 3)\n\n    # Example: count participants by role field if provided,\n    # else default to 'person'. Adjust mapping as needed for your Zoom app data.\n    participants = obj.get(\"participants\", []) or obj.get(\"participant_data\", [])\n    roles_to_increment = []\n    for p in participants:\n        role = p.get(\"role\") or \"person\"\n        if role not in TRACKED_ROLES:\n            role = \"person\"\n        roles_to_increment.append(role)\n\n    if roles_to_increment:\n        tracker.increment_roles(call_index, roles_to_increment)\n\n    return json_ok({\"meeting_id\": meeting_id, \"index\": call_index, \"added\": roles_to_increment})\n\nif __name__ == \"__main__\":\n    app.run(host=HOST, port=PORT, debug=DEBUG)","size_bytes":2898},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/features.tsx":{"content":"import React, { useState } from 'react';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\n\ninterface Feature {\n  title: string;\n  description: string;\n  content: string;\n}\n\nconst featureData: Feature[] = [\n  {\n    \"title\": \"Mentorship Circles\",\n    \"description\": \"Guided small-group learning experiences where knowledge flows both ways.\",\n    \"content\": \"Join intimate groups led by experienced mentors and peers. Share your expertise while learning from others in a collaborative, supportive environment.\"\n  },\n  {\n    \"title\": \"Skill Swaps\",\n    \"description\": \"Teach what you know, learn what you don’t in our peer-to-peer exchanges.\",\n    \"content\": \"Offer your skills to others and receive training in return. A flexible, community-driven way to grow your abilities while helping others grow theirs.\"\n  },\n  {\n    \"title\": \"Storytelling\",\n    \"description\": \"A library of wisdom and personal experiences shared across generations.\",\n    \"content\": \"Contribute your life stories, lessons, and insights to inspire and educate. Explore narratives from diverse backgrounds to broaden your perspective.\"\n  },\n  {\n    \"title\": \"Collaborative Projects\",\n    \"description\": \"Join forces on creative and practical tasks that bridge generations.\",\n    \"content\": \"Work together on meaningful initiatives — from art and design to problem-solving challenges — that combine the strengths of different age groups.\"\n  },\n  {\n    \"title\": \"Workshops\",\n    \"description\": \"Structured, interactive events designed for collaborative learning.\",\n    \"content\": \"Participate in hands-on sessions led by experts. Gain practical skills, exchange ideas, and leave with actionable knowledge you can apply immediately.\"\n  },\n  {\n    \"title\": \"Social Spaces\",\n    \"description\": \"Safe, casual conversations in our welcoming community rooms.\",\n    \"content\": \"Relax and connect with others in a friendly, inclusive setting. Build relationships, share interests, and enjoy open dialogue without pressure.\"\n  },\n];\n\nconst FeatureCard = ({ feature }: { feature: Feature }) => {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <Card >\n        <DialogTrigger asChild>\n          <Button variant=\"ghost\" className=\"p-0 w-full h-full justify-start text-left\">\n            <CardHeader>\n              <CardTitle>{feature.title}</CardTitle>\n              <CardDescription>{feature.description}</CardDescription>\n            </CardHeader>\n          </Button>\n        </DialogTrigger>\n      </Card>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>{feature.title}</DialogTitle>\n          <DialogDescription>\n            {feature.content}\n          </DialogDescription>\n        </DialogHeader>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\n\nconst Features = () => {\n  return (\n    <div className=\"grid gap-4 md:grid-cols-3\">\n      {featureData.map((feature, index) => (\n        <FeatureCard key={index} feature={feature} />\n      ))}\n    </div>\n  );\n};\n\nexport default Features;","size_bytes":3301},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/backend/server.js":{"content":"const express = require(\"express\");\nconst http = require(\"http\");\nconst { Server } = require(\"socket.io\");\nconst mongoose = require(\"mongoose\");\nconst cors = require(\"cors\");\n\nconst app = express();\napp.use(cors());\napp.use(express.json());\n\nconst server = http.createServer(app);\nconst io = new Server(server, { cors: { origin: \"*\" } });\n\nconst PORT = process.env.PORT || 4000;\nconst MONGO_URI = process.env.MONGO_URI || \"mongodb://localhost:27017/matchmaker\";\n\n// -----------------------------\n// MongoDB Models\n// -----------------------------\nconst profileSchema = new mongoose.Schema({\n  id: String,\n  username: String,\n  skills: [String],\n  availability: [String],\n});\n\nconst sessionSchema = new mongoose.Schema({\n  sessionId: String,\n  a: Object,\n  b: Object,\n  ts: Number,\n});\n\nconst Profile = mongoose.model(\"Profile\", profileSchema);\nconst Session = mongoose.model(\"Session\", sessionSchema);\n\n// -----------------------------\n// In-memory state\n// -----------------------------\nconst queue = new Map();\nconst socketsByUser = new Map();\n\n// -----------------------------\n// Matching Logic\n// -----------------------------\nfunction scoreCompatibility(a, b) {\n  const skillsA = new Set(a.skills || []);\n  const skillsB = new Set(b.skills || []);\n  const sharedSkills = [...skillsA].filter((s) => skillsB.has(s));\n\n  const availA = new Set(a.availability || []);\n  const availB = new Set(b.availability || []);\n  const sharedAvailability = [...availA].filter((t) => availB.has(t));\n\n  const score = sharedSkills.length * 2 + sharedAvailability.length;\n  return { score, sharedSkills, sharedAvailability };\n}\n\nasync function computeAndEmitMatchesForUser(userId) {\n  const profile = queue.get(userId);\n  if (!profile) return;\n\n  const scores = [];\n  for (const [otherId, otherProfile] of queue.entries()) {\n    if (otherId === userId) continue;\n    const { score, sharedSkills, sharedAvailability } = scoreCompatibility(profile, otherProfile);\n    scores.push({\n      userId: otherId,\n      username: otherProfile.username,\n      score,\n      sharedSkills,\n      sharedAvailability,\n    });\n  }\n\n  scores.sort((a, b) => b.score - a.score);\n  const sid = socketsByUser.get(userId);\n  if (sid) io.to(sid).emit(\"matchUpdate\", scores);\n}\n\nasync function attemptAutoMatchForUser(userId) {\n  const profile = queue.get(userId);\n  if (!profile) return;\n\n  let best = null;\n  for (const [otherId, otherProfile] of queue.entries()) {\n    if (otherId === userId) continue;\n    const { score } = scoreCompatibility(profile, otherProfile);\n    if (!best || score > best.score) best = { otherId, otherProfile, score };\n  }\n\n  if (best && best.score >= 1) {\n    const sessionId = `sess_${Date.now()}_${Math.random().toString(36).slice(2, 8)}`;\n    const a = profile;\n    const b = best.otherProfile;\n\n    queue.delete(userId);\n    queue.delete(best.otherId);\n\n    const sidA = socketsByUser.get(userId);\n    const sidB = socketsByUser.get(best.otherId);\n    const payload = { sessionId, a, b };\n\n    if (sidA) io.to(sidA).emit(\"matched\", payload);\n    if (sidB) io.to(sidB).emit(\"matched\", payload);\n\n    await Session.create({ sessionId, a, b, ts: Date.now() });\n  }\n}\n\n// -----------------------------\n// Socket Events\n// -----------------------------\nio.on(\"connection\", (socket) => {\n  console.log(\"Socket connected:\", socket.id);\n\n  socket.on(\"joinQueue\", async (profile) => {\n    if (!profile || !profile.id) return;\n    queue.set(profile.id, profile);\n    socketsByUser.set(profile.id, socket.id);\n\n    await Profile.findOneAndUpdate({ id: profile.id }, profile, { upsert: true });\n    computeAndEmitMatchesForUser(profile.id);\n    attemptAutoMatchForUser(profile.id);\n    socket.emit(\"notification\", \"Joined matching queue\");\n  });\n\n  socket.on(\"leaveQueue\", (userId) => {\n    queue.delete(userId);\n    socketsByUser.delete(userId);\n    socket.emit(\"notification\", \"Left matching queue\");\n  });\n\n  socket.on(\"updateProfile\", async (profile) => {\n    if (!profile || !profile.id) return;\n    queue.set(profile.id, profile);\n    socketsByUser.set(profile.id, socket.id);\n\n    await Profile.findOneAndUpdate({ id: profile.id }, profile, { upsert: true });\n    computeAndEmitMatchesForUser(profile.id);\n  });\n\n  socket.on(\"requestManualMatch\", (userId) => {\n    if (!queue.has(userId)) {\n      socket.emit(\"notification\", \"You are not in the queue. Join first.\");\n      return;\n    }\n    computeAndEmitMatchesForUser(userId);\n    attemptAutoMatchForUser(userId);\n    socket.emit(\"notification\", \"Manual match attempted\");\n  });\n\n  socket.on(\"acceptMatch\", async ({ inviterId, acceptorId }) => {\n    const a = queue.get(inviterId);\n    const b = queue.get(acceptorId);\n    if (!a || !b) {\n      socket.emit(\"notification\", \"One of the users is no longer available.\");\n      return;\n    }\n\n    const sessionId = `sess_${Date.now()}_${Math.random().toString(36).slice(2, 8)}`;\n    const payload = { sessionId, a, b };\n\n    queue.delete(inviterId);\n    queue.delete(acceptorId);\n\n    const sidA = socketsByUser.get(inviterId);\n    const sidB = socketsByUser.get(acceptorId);\n\n    if (sidA) io.to(sidA).emit(\"matched\", payload);\n    if (sidB) io.to(sidB).emit(\"matched\", payload);\n\n    await Session.create({ sessionId, a, b, ts: Date.now() });\n  });\n\n  socket.on(\"disconnect\", () => {\n    for (const [userId, sid] of socketsByUser.entries()) {\n      if (sid === socket.id) socketsByUser.delete(userId);\n    }\n    console.log(\"Socket disconnected:\", socket.id);\n  });\n});\n\n// -----------------------------\n// REST API\n// -----------------------------\napp.get(\"/\", async (req, res) => {\n  const sessionCount = await Session.countDocuments();\n  res.send({ ok: true, queueSize: queue.size, sessions: sessionCount });\n});\n\napp.get(\"/sessions\", async (req, res) => {\n  const sessions = await Session.find().sort({ ts: -1 }).limit(50);\n  res.json(sessions);\n});\n\napp.get(\"/profile/:id\", async (req, res) => {\n  const profile = await Profile.findOne({ id: req.params.id });\n  if (!profile) return res.status(404).json({ error: \"Profile not found\" });\n  res.json(profile);\n});\n\n// -----------------------------\n// Start Server\n// -----------------------------\nmongoose\n  .connect(MONGO_URI)\n  .then(() => {\n    server.listen(PORT, () => {\n      console.log(`Match server running on http://localhost:${PORT}`);\n    });\n  })\n  .catch((err) => console.error(\"MongoDB connection error:\", err));\n","size_bytes":6371},"client/src/hooks/useMatchMe.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { io, Socket } from \"socket.io-client\";\n\n/**\n * Types\n */\nexport type UserProfile = {\n  id: string;\n  username?: string;\n  skills: string[];\n  availability?: string[];\n  metadata?: Record<string, any>;\n};\n\nexport type MatchItem = {\n  userId: string;\n  username?: string;\n  score: number;\n  sharedSkills: string[];\n  sharedAvailability?: string[];\n};\n\ntype ServerToClientEvents = {\n  matchUpdate: (matches: MatchItem[]) => void;\n  matched: (session: { sessionId: string; a: UserProfile; b: UserProfile }) => void;\n  notification: (msg: string) => void;\n};\n\ntype ClientToServerEvents = {\n  joinQueue: (profile: UserProfile) => void;\n  leaveQueue: (userId: string) => void;\n  updateProfile: (profile: UserProfile) => void;\n  requestManualMatch: (userId: string) => void;\n  acceptMatch: (payload: { inviterId: string; acceptorId: string }) => void;\n};\n\nconst SOCKET_URL = import.meta.env.VITE_MATCHING_SOCKET ?? \"http://localhost:4000\";\n\nexport function useMatchMe(initialProfile: UserProfile | null) {\n  const [socket, setSocket] = useState<Socket<ServerToClientEvents, ClientToServerEvents> | null>(null);\n  const [matches, setMatches] = useState<MatchItem[]>([]);\n  const [topMatch, setTopMatch] = useState<MatchItem | null>(null);\n  const [isQueued, setIsQueued] = useState(false);\n  const [isAutoMatch, setIsAutoMatch] = useState(false);\n  const [notifications, setNotifications] = useState<string[]>([]);\n  const profileRef = useRef<UserProfile | null>(initialProfile);\n\n  useEffect(() => {\n    profileRef.current = initialProfile;\n  }, [initialProfile]);\n\n  useEffect(() => {\n    const s = io(SOCKET_URL, {\n      transports: [\"websocket\", \"polling\"],\n      autoConnect: false,\n    }) as Socket<ServerToClientEvents, ClientToServerEvents>;\n\n    s.on(\"connect\", () => {\n      pushNotif(\"Connected to match server.\");\n      if (profileRef.current && isAutoMatch) {\n        s.emit(\"joinQueue\", profileRef.current);\n        setIsQueued(true);\n      }\n    });\n\n    s.on(\"matchUpdate\", (m) => {\n      setMatches(m);\n      setTopMatch(m[0] ?? null);\n    });\n\n    s.on(\"matched\", (session) => {\n      pushNotif(`Matched with ${session.b.username ?? session.b.id}. Session: ${session.sessionId}`);\n      setIsQueued(false);\n      setIsAutoMatch(false);\n    });\n\n    s.on(\"notification\", (msg) => pushNotif(msg));\n\n    s.connect();\n    setSocket(s);\n    return () => {\n      s.disconnect();\n      setSocket(null);\n    };\n  }, []);\n\n  function pushNotif(msg: string) {\n    setNotifications((prev) => [msg, ...prev].slice(0, 10));\n  }\n\n  function startAutoMatch() {\n    if (!socket || !profileRef.current) {\n      pushNotif(\"No profile or server connection.\");\n      return;\n    }\n    setIsAutoMatch(true);\n    socket.emit(\"joinQueue\", profileRef.current);\n    setIsQueued(true);\n    pushNotif(\"Auto-match started — searching for matches...\");\n  }\n\n  function stopAutoMatch() {\n    if (!socket || !profileRef.current) return;\n    socket.emit(\"leaveQueue\", profileRef.current.id);\n    setIsAutoMatch(false);\n    setIsQueued(false);\n    pushNotif(\"Auto-match stopped.\");\n  }\n\n  function manualRequestMatch() {\n    if (!socket || !profileRef.current) return;\n    socket.emit(\"requestManualMatch\", profileRef.current.id);\n    pushNotif(\"Manual match requested.\");\n  }\n\n  function updateProfile(profile: UserProfile) {\n    profileRef.current = profile;\n    if (socket) socket.emit(\"updateProfile\", profile);\n  }\n\n  function acceptTopMatch() {\n    if (!socket || !profileRef.current || !topMatch) return;\n    socket.emit(\"acceptMatch\", { inviterId: topMatch.userId, acceptorId: profileRef.current.id });\n    pushNotif(`Accepted match with ${topMatch.username ?? topMatch.userId}`);\n  }\n\n  return {\n    socket,\n    matches,\n    topMatch,\n    isQueued,\n    isAutoMatch,\n    notifications,\n    startAutoMatch,\n    stopAutoMatch,\n    manualRequestMatch,\n    acceptTopMatch,\n    updateProfile,\n  };\n}","size_bytes":3941},"client/src/components/ui/skills.tsx":{"content":"import { useState } from \"react\";\n\n//  Raw skill list for dropdowns\nexport const skills = [\n  \"Gardening\", \"Cooking\", \"Baking\", \"Reading\", \"Writing\", \"Drawing\", \"Painting\", \"Sculpting\",\n  \"Music (Playing Instrument)\", \"Singing\", \"Dancing\", \"Photography\", \"Videography\", \"Coding\",\n  \"Web Development\", \"Mobile App Development\", \"Game Development\", \"Academics (General)\",\n  \"History\", \"Science\", \"Mathematics\", \"Literature\", \"Foreign Languages\", \"Tutoring\", \"Mentoring\",\n  \"Sports (Team)\", \"Sports (Individual)\", \"Yoga\", \"Meditation\", \"Hiking\", \"Camping\", \"Fishing\",\n  \"Board Games\", \"Card Games\", \"Puzzles\", \"Knitting\", \"Crocheting\", \"Sewing\", \"Woodworking\",\n  \"Pottery\", \"Calligraphy\", \"Graphic Design\", \"Animation\", \"Creative Writing\", \"Poetry\",\n  \"Volunteering\", \"Community Service\", \"First Aid\", \"CPR\", \"Animal Care\", \"Event Planning\",\n  \"Public Speaking\", \"Storytelling\", \"Astronomy\", \"Bird Watching\", \"Genealogy\", \"Home Improvement\",\n  \"Car Repair\", \"Financial Literacy\", \"Investing\",\n];\n\n// Structured skill entry for profile\nexport interface SkillEntry {\n  name: string;\n  proficiency: number; // 1–5\n  yearsExperience: number;\n  wantsToTeach: boolean;\n  wantsToLearn: boolean;\n}\n\nexport function useSkills() {\n  const [skillEntries, setSkillEntries] = useState<SkillEntry[]>([]);\n\n  const addSkill = (entry: SkillEntry) => {\n    setSkillEntries((prev) => {\n      const exists = prev.find((s) => s.name === entry.name);\n      return exists\n        ? prev.map((s) => (s.name === entry.name ? entry : s))\n        : [...prev, entry];\n    });\n  };\n\n  const removeSkill = (skillName: string) => {\n    setSkillEntries((prev) => prev.filter((s) => s.name !== skillName));\n  };\n\n  return {\n    skills,\n    skillEntries,\n    addSkill,\n    removeSkill,\n  };\n}\n","size_bytes":1759},"client/src/pages/gamification-tab.tsx":{"content":"import React, { useEffect, useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\n\nexport type UserProfile = {\n  id: string;\n  username: string;\n  level: number;\n  xp: number;\n  streak: number;\n  badges: string[];\n  skills: string[];\n};\n\nexport type LeaderboardEntry = {\n  userId: string;\n  username: string;\n  score: number;\n  level: number;\n};\n\nfunction xpNeededForLevel(level: number) {\n  return Math.floor(500 * Math.pow(1.25, level - 1));\n}\n\nfunction applyDailyBonus(user: UserProfile): UserProfile {\n  const bonus = 50 * user.streak;\n  return {\n    ...user,\n    xp: user.xp + bonus,\n    streak: user.streak + 1,\n  };\n}\n\nexport default function GamificationTab({ userId }: { userId: string }) {\n  const [profile, setProfile] = useState<UserProfile>({\n    id: userId,\n    username: \"DemoUser\",\n    level: 1,\n    xp: 0,\n    streak: 1,\n    badges: [],\n    skills: [\"Math\", \"Science\"],\n  });\n\n  const [leaderboard, setLeaderboard] = useState<LeaderboardEntry[]>([]);\n  const [notifications, setNotifications] = useState<string[]>([]);\n  const [cooldown, setCooldown] = useState(false);\n\n  useEffect(() => {\n    updateLeaderboard(profile);\n  }, []);\n\n  function pushNotif(msg: string) {\n    setNotifications((prev) => [msg, ...prev].slice(0, 5));\n  }\n\n  function updateLeaderboard(p: UserProfile) {\n    const entry: LeaderboardEntry = {\n      userId: p.id,\n      username: p.username,\n      score: p.xp + p.level * 100,\n      level: p.level,\n    };\n    setLeaderboard([entry]);\n  }\n\n  function earnPoints(amount: number) {\n    if (cooldown) {\n      pushNotif(\"⏳ Please wait before earning again!\");\n      return;\n    }\n    setCooldown(true);\n    setTimeout(() => setCooldown(false), 3000);\n\n    let updated = { ...profile, xp: profile.xp + amount };\n    const xpThreshold = xpNeededForLevel(updated.level);\n\n    if (updated.xp >= xpThreshold) {\n      updated.level++;\n      updated.xp -= xpThreshold;\n      updated.badges.push(`Level ${updated.level} Unlocked`);\n      pushNotif(`🎉 You leveled up to ${updated.level}!`);\n    }\n\n    setProfile(updated);\n    updateLeaderboard(updated);\n  }\n\n  function claimDailyBonus() {\n    const updated = applyDailyBonus(profile);\n    pushNotif(`🔥 Daily streak bonus applied! (+${50 * profile.streak})`);\n    setProfile(updated);\n    updateLeaderboard(updated);\n  }\n\n  const xpNeeded = xpNeededForLevel(profile.level);\n  const progress = Math.min((profile.xp / xpNeeded) * 100, 100);\n\n  return (\n    <section id=\"gamify\" className=\"py-20 bg-background font-arcade\">\n      <div className=\"max-w-6xl mx-auto px-6\">\n        <h2 className=\"text-3xl text-primary text-center mb-6\">🏆 Gamification</h2>\n\n        {/* XP + LEVEL */}\n        <div className=\"bg-card p-6 rounded-lg shadow-md mb-6 text-center\">\n          <h3 className=\"text-xl mb-2\">Level {profile.level}</h3>\n          <motion.div\n            initial={{ width: 0 }}\n            animate={{ width: `${progress}%` }}\n            transition={{ duration: 0.8 }}\n            className=\"h-4 bg-primary rounded-full\"\n          />\n          <p className=\"text-sm mt-2\">\n            {profile.xp} / {xpNeeded} XP ({progress.toFixed(1)}%)\n          </p>\n        </div>\n\n        {/* Buttons */}\n        <div className=\"flex gap-4 justify-center mb-6\">\n          <Button\n            onClick={() => earnPoints(120)}\n            className=\"bg-primary px-6\"\n            disabled={cooldown}\n          >\n            {cooldown ? \"Cooldown...\" : \"Earn Points\"}\n          </Button>\n          <Button onClick={claimDailyBonus} className=\"bg-accent px-6\">\n            Claim Daily Bonus\n          </Button>\n        </div>\n\n        {/* Streaks & Badges */}\n        <div className=\"grid grid-cols-2 gap-4 mb-6\">\n          <div className=\"bg-card p-4 rounded\">\n            <h4 className=\"text-lg mb-2\">🔥 Streak</h4>\n            <p>{profile.streak} days</p>\n            <p className=\"text-xs text-muted-foreground\">\n              Bonus: +{50 * profile.streak} XP\n            </p>\n          </div>\n          <div className=\"bg-card p-4 rounded\">\n            <h4 className=\"text-lg mb-2\">🎖️ Badges</h4>\n            <ul className=\"text-sm list-disc pl-4\">\n              {profile.badges.length ? (\n                profile.badges.map((b, i) => <li key={i}>{b}</li>)\n              ) : (\n                <li>No badges yet</li>\n              )}\n            </ul>\n          </div>\n        </div>\n\n        {/* Leaderboard */}\n        <div className=\"bg-card p-6 rounded\">\n          <h4 className=\"text-lg mb-3\">Leaderboard</h4>\n          {leaderboard.length === 0 ? (\n            <p className=\"text-sm text-muted-foreground\">No leaderboard data yet</p>\n          ) : (\n            <ul>\n              {leaderboard.map((entry, i) => (\n                <li\n                  key={entry.userId}\n                  className={`flex justify-between ${\n                    entry.userId === profile.id ? \"bg-primary/20 font-bold\" : \"\"\n                  } p-2 rounded`}\n                >\n                  <span>\n                    {i === 0 ? \"🥇\" : i === 1 ? \"🥈\" : i === 2 ? \"🥉\" : `#${i + 1}`} {entry.username}\n                  </span>\n                  <span>Lv {entry.level} ({entry.score} pts)</span>\n                </li>\n              ))}\n            </ul>\n          )}\n        </div>\n\n        {/* Notifications */}\n        <div className=\"mt-6\">\n          <h4 className=\"text-lg mb-2\">Notifications</h4>\n          <ul className=\"text-sm text-muted-foreground\">\n            {notifications.length ? (\n              notifications.map((n, i) => <li key={i}>• {n}</li>)\n            ) : (\n              <li>No recent activity</li>\n            )}\n          </ul>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5746},"client/src/pages/games.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Trophy, Target, Star, Gamepad2 } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport AnimatedPacman from \"@/components/animated-pacman\";\n\nexport default function Games() {\n  return (\n    <div className=\"min-h-screen bg-background text-foreground font-sans\">\n      <Navigation />\n      \n      <section className=\"py-20 bg-background\">\n        <div className=\"max-w-6xl mx-auto px-6\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl font-arcade text-primary mb-4 neon-glow\" data-testid=\"text-games-title\">\n              🎮 GAMES ARCADE\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Choose from our collection of fun mini-games and progression systems designed to make learning and community building more engaging!\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {/* Pac-Man Game */}\n            <Card className=\"bg-card hover:glow transition-all arcade-button cursor-pointer pulse-border\" data-testid=\"card-pacman-game\">\n              <CardHeader className=\"text-center\">\n                <div className=\"mx-auto mb-4\">\n                  <AnimatedPacman size={60} className=\"mx-auto\" />\n                </div>\n                <CardTitle className=\"font-arcade text-primary rainbow-text\">PAC-MAN MINI GAME</CardTitle>\n                <CardDescription>\n                  Classic arcade action! Move around and collect dots while avoiding obstacles.\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"flex items-center gap-2\">\n                      <Target className=\"w-4 h-4\" />\n                      Objective: Collect dots\n                    </span>\n                    <span className=\"text-primary\">🎯 Score points</span>\n                  </div>\n                  <Button className=\"w-full arcade-button bg-pac-yellow text-black hover:glow\" data-testid=\"button-play-pacman\">\n                    <Gamepad2 className=\"w-4 h-4 mr-2\" />\n                    PLAY PAC-MAN\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* XP Progress Game */}\n            <Link href=\"/gamification\">\n              <Card className=\"bg-card hover:glow transition-all arcade-button cursor-pointer color-shift-bg\" data-testid=\"card-xp-progress\">\n                <CardHeader className=\"text-center\">\n                  <Trophy className=\"w-16 h-16 mx-auto mb-4 text-primary pixel-sparkle\" />\n                  <CardTitle className=\"font-arcade text-primary neon-glow\">XP PROGRESS</CardTitle>\n                  <CardDescription>\n                    Level up your profile by earning experience points, maintaining streaks, and unlocking badges.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"flex items-center gap-2\">\n                        <Star className=\"w-4 h-4\" />\n                        Features: Levels, XP, Badges\n                      </span>\n                      <span className=\"text-secondary\">📈 Progress</span>\n                    </div>\n                    <Button className=\"w-full arcade-button bg-primary text-primary-foreground hover:glow\" data-testid=\"button-play-gamification\">\n                      <Trophy className=\"w-4 h-4 mr-2\" />\n                      VIEW PROGRESS\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </Link>\n\n            {/* Konami Code Challenge */}\n            <Card className=\"bg-card hover:glow transition-all arcade-button cursor-pointer pulse-border\" data-testid=\"card-konami-code\">\n              <CardHeader className=\"text-center\">\n                <div className=\"text-4xl mb-4 pixel-sparkle\">🎹</div>\n                <CardTitle className=\"font-arcade text-secondary rainbow-text\">KONAMI CODE</CardTitle>\n                <CardDescription>\n                  Discover the secret code! Enter the classic Konami sequence for a special surprise.\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"text-sm text-center\">\n                    <div className=\"font-mono text-xs bg-muted p-2 rounded\">\n                      ↑ ↑ ↓ ↓ ← → ← → B A\n                    </div>\n                    <p className=\"mt-2 text-muted-foreground\">Try entering this sequence!</p>\n                  </div>\n                  <Button className=\"w-full arcade-button bg-secondary text-secondary-foreground hover:glow\" data-testid=\"button-konami-hint\">\n                    <Star className=\"w-4 h-4 mr-2\" />\n                    LEARN MORE\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Future Games Placeholder */}\n            <Card className=\"bg-card hover:glow transition-all arcade-button opacity-75\" data-testid=\"card-coming-soon\">\n              <CardHeader className=\"text-center\">\n                <div className=\"text-4xl mb-4\">🚀</div>\n                <CardTitle className=\"font-arcade text-muted-foreground\">COMING SOON</CardTitle>\n                <CardDescription>\n                  More exciting games and challenges are in development. Stay tuned!\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"text-sm text-center text-muted-foreground\">\n                    • Memory Games<br/>\n                    • Trivia Challenges<br/>\n                    • Word Games<br/>\n                    • Logic Puzzles\n                  </div>\n                  <Button disabled className=\"w-full arcade-button\" data-testid=\"button-coming-soon\">\n                    <Gamepad2 className=\"w-4 h-4 mr-2\" />\n                    COMING SOON\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Instructions Section */}\n          <div className=\"mt-16 text-center\">\n            <h2 className=\"text-2xl font-arcade text-primary mb-6 neon-glow\">How to Play</h2>\n            <div className=\"grid md:grid-cols-3 gap-6 max-w-4xl mx-auto\">\n              <div className=\"bg-card p-4 rounded-lg border\">\n                <div className=\"text-2xl mb-2\">🎯</div>\n                <h3 className=\"font-semibold mb-2\">Choose Your Game</h3>\n                <p className=\"text-sm text-muted-foreground\">Select from our collection of mini-games and challenges.</p>\n              </div>\n              <div className=\"bg-card p-4 rounded-lg border\">\n                <div className=\"text-2xl mb-2\">🏆</div>\n                <h3 className=\"font-semibold mb-2\">Earn Points</h3>\n                <p className=\"text-sm text-muted-foreground\">Complete challenges to earn XP and unlock new features.</p>\n              </div>\n              <div className=\"bg-card p-4 rounded-lg border\">\n                <div className=\"text-2xl mb-2\">🎉</div>\n                <h3 className=\"font-semibold mb-2\">Have Fun</h3>\n                <p className=\"text-sm text-muted-foreground\">Enjoy learning and connecting with others through play!</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":8000}},"version":1}